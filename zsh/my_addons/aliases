# vim: set ft=zsh:

# define functions first so that it doesn't get affected by aliases being defined here

# to measure zsh performance - https://blog.mattclemente.com/2020/06/26/oh-my-zsh-slow-to-load.html
function timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

## these are convenient functions for getting information from package.json
## perhaps should be moved somewhere else than this file
function grep-npm-packages-with-keyword () {
  { echo '{' ; grep $1 package.json ; echo '}' } \
    | jq -n -f /dev/stdin \
    | jq -r 'keys | .[]' \
    | xargs
}

function grep-deleted-npm-packages () {
  function _grep-deleted-npm-packages () {
    gd --unified=0 package.json | cat | egrep -- '^- ' | sed s/-//
  }

  { echo '{' ; _grep-deleted-npm-packages ; echo '}' } \
    | jq -n -f /dev/stdin \
    | jq -r 'keys | .[]' \
    | xargs
}

## these benches can be used to compare between different systems
function bench () {
  start=$(date +%s)
  ${1}
  end=$(date +%s)
  echo "bench took $(($end-$start))s"
}

# from https://www.pcsuggest.com/benchmarking-linux-systems-with-simple-command-line-tools/
function simple_test_cpu () {
  i=0; while (( i < 9999999 )); do (( i ++ )); done
}

function simple_bench_cpu () {
  bench simple_test_cpu
}

# from https://cloudzy.com/knowledge-base/test-disk-speed-in-linux/
function simple_test_disk () {
  sync; dd if=/dev/zero of=temp_disk_test_file bs=1M count=1024; sync
  rm temp_disk_test_file
}

function simple_bench_disk () {
  bench simple_test_disk
}

# when I don't feel liking adding `| less` at the end
function show () {
  $@ | less -r
}

# use help like man
function help () {
  show $@ --help
}

# quickly jump via fsad - https://github.com/junegunn/fzf/wiki/examples#with-fasd-1
unalias j 2>/dev/null
function j() {
    [ $# -gt 0 ] && fasd_cd -d "$*" && return
    local dir
    dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
}

if test "$(uname)" = "Darwin"; then
  function _sound_for_return() {
    expr $? = 0 > /dev/null && afplay /System/Library/Sounds/Funk.aiff || afplay /System/Library/Sounds/Purr.aiff
  }

  # getting notified on a job that takes some time (usually with `make`) turns out to be very helpful
  function notify() {
    start_time=$(date +%s)

    env time -p $@
    ret=$?

    # skip making sound for under 2 seconds
    test $(expr $(date +%s) - ${start_time}) -gt 2 && {
      expr ${ret} = 0 > /dev/null ; _sound_for_return
    }

    # print the date just before exit
    date

    # return the original result
    return ${ret}
  }

  # able to hook up completions for arbitrary command arguments
  # thanks to great hints from https://www.dolthub.com/blog/2021-11-15-zsh-completions-with-subcommands/
  # but this does not work well with subcommands of the commands at the moment.
  # but since `make` has no more depth it's OK for now.
  _notify() {
    local line state

    _arguments -C "1: :->cmds" "*::arg:->args"

    case "$state" in
      cmds)
        _exec # borrowing `_exec` completion function to list all commands
        ;;
      args)
        _${line[1]} # assume the command has its own completion function like `_make` defined
        ;;
    esac
  }

  # since compdef on regular sourcing doesn't seem to work
  zsh-defer compdef _notify notify

  alias make='notify make'

  # shorthand for other commands other than make - eg. `nt true` and `nt false`
  alias nt='notify'
fi

# this will return either `light` or `dark`
function theme-tone () {
  # assuming I only use `solarized-*`
  current-base16 | sed s/solarized-//
  # although below "works" it doesn't work well with my cached base16 shell eval - look at the end of ./shell_ext
  # printenv BASE16_THEME | sed s/solarized-//
}

# https://www.stefanjudis.com/today-i-learned/suffix-aliases-in-zsh/
alias -s md=glow
alias -s {ts,tsx,js,jsx,json,yaml,yml,toml}=vi
alias -s {py,lua,nix}=vi
alias -s {conf,}=lf
alias -s {org,el}='emacsclient'
alias -s git='git clone'

alias gh='GLAMOUR_STYLE=$(theme-tone) gh'

# replace htop with bottom
alias htop="btm -b"
# overwrite essential stuff
alias which="which -a"
alias ping="gping"

# human friendly df and du
alias df="duf"
alias du='du -d 1 -h | sort -h -r'

# exa
alias exa="exa --icons --group-directories-first -F --ignore-glob='**/.git|**/.DS_Store'"
alias ls="exa"
alias l="ls -lah -g --git"
alias lt="ls -lah -T -L=3 --git --git-ignore"
alias tree="exa -G -T --git-ignore"

# git
alias tig='TERM=xterm COLORTERM=256bit tig'
alias gs="git status"
alias tgs="tig status"
alias gd="git diff"
alias gdc="git diff --cached"

unalias gl
# envelop `git pull` with `stash` and `stash pop` when the status is not clean
function gl () {
  _git_status="$(git status -s)"

  test -n "${_git_status}" && git stash

  # avoid git stash pop when pull fails
  git pull --rebase || {
    test -n "${_git_status}" \
      && echo "didn't run git stash pop due to git pull failed"
    return
  }

  test -n "${_git_status}" && git stash pop
}

# this overwrites existing gap which is for git apply
alias gap="git add -p"

# git fix remote to ssh from https
alias gfssh="ambr --no-parent-ignore 'https://' 'ssh://git@' .git/config"

# editor
alias pathnvimlazy='echo "~/.local/share/nvim/lazy" | pbcopy ; pbpaste'
alias vim="nvim"
alias vi="vim"

_dotfilepath="$(readlink -f ~/.config/dfs-rhc)"
_perflogpath="${_dotfilepath}/.perf.log"
## special modes
# start neovim purely without any plugins loaded
alias vil='my_nvim_plugins_default_to_lazy=1 vi'
alias vip='vi -u NONE'
# measure startup time
alias vips="rm -f ${_perflogpath} && vi --startuptime ${_perflogpath} ${_perflogpath}"
# to enable LuaCacheProfile
alias cim='NVIM_CACHE_PROFILE=1 vi'
# start neovim to profile interactively
alias pim='NVIM_PROFILE=1 vi'
# neovim with ghost
alias vig='my_nvim_ghost=1 vi'

# useful when the status of lazy.nvim seems not clean
# for now, it only print the command not run
alias clean-nvim-cmd='echo "rm -rf  ~/.local/share/nvim/lazy ~/.cache/nvim/lazy"'

# open in terminal using daemon process (create if it doesn't exist yet)
alias emacsclient="emacsclient -nw -c -a ''"

# just a dirty hack to make `emacs` command to use a handle which work more smoothly
# in terms of being able to activate the window like any other app on macOS
typeset -f emacs &> /dev/null && unfunction emacs
function emacs () {
  if test $# -eq 0; then
    if test -n "${SSH_CONNECTION}"; then
      emacsclient
    elif test "$(uname)" = "Darwin"; then
      ~/.config/dfs-rhc/bin/darwin/open-gui-emacs.sh
    else
      emacsclient
    fi
  else
    emacsclient ${@}
  fi
}

# viewer and filter
alias vimdiff="nvim -dR"
alias diff="git diff --no-index"
alias less="less -r"
alias cat='bat'
alias k9s='TERM=xterm COLORTERM=256bit k9s'

# ripgrep
alias rg="rg -p -i"
alias rgc="rg -C"
alias rgc5="rgc 5"

alias glow='glow -p -s "$(theme-tone)"'

alias fzfp='fzf --height 100% --preview "bat --style=numbers --color=always {}"'
alias fzfpp='fzf|fpp'
alias fpp='wrapped-fpp'

# diff with bat
function bdiff () { diff -u $@ | bat;} # use `vimdiff` for editing

# shorthands
alias dc="docker-compose"
alias mp='multipass'
alias tf='terraform'
alias wttr='curl wttr.in'
alias cht='CHTSH_QUERY_OPTIONS="style=friendly" cht.sh'
alias chtsh='cht --shell'

# web search
alias googler="googler -n 3"
alias ddgr="ddgr -n 3"

# commandify
alias fulltimezsh="FORCE_LOAD_MY_ZSH_STUFF=1 timezsh"
alias vzshrc="nvim ~/.zshrc"
alias sshconfig="cat ~/.ssh/config"
alias vsshconfig="nvim ~/.ssh/config"
alias touchreadme="touch README.md"
alias touchmakefile="touch Makefile"
alias weather='curl wttr.in'
alias shebang='echo "#!/usr/bin/env bash" | pbcopy ; pbpaste'
alias executable='chmod +x'
alias lf='UNSET_ALL_MY_ZSH_STUFF_LOADED=1 lf'
alias quickvenv='python3 -m venv "${MY_QUICK_VENV_PATH:-.venv}" && source "${MY_QUICK_VENV_PATH:-.venv}/bin/activate"'

alias nis="npm install --save"
alias nisd="npm install --save-dev"
alias whoami-aws="aws sts get-caller-identity"
alias q='test -n "${VIRTUAL_ENV}" && deactivate || exit'
alias e='${EDITOR} $(fzf)'
alias jqstringify='jq ". | tostring"'
alias jqfromjson='jq "fromjson"'
# more on it at https://www.cyberciti.biz/faq/unix-linux-check-if-port-is-in-use-command/
alias listopenports='lsof -i -P -n | grep LISTEN'

# emacs
alias doom="~/.doom-emacs.d/bin/doom"

## these are replaced by ../../bin/local/pb[paste|copy]
#
# # bring `pbcopy` and `pbpaste` to linux
# test -z "${commands[pbcopy]}" \
#   && alias pbcopy='xsel -i -b'
#
# test -z "${commands[pbpaste]}" \
#   && alias pbpaste='xsel -o -b'

## legacy
#
# alias ccat="ccat -G Keyword=\"darkgreen\" -G Plaintext=\"ellow\" -G Tag=\"fuchsia\" -G HTMLAttrName=\"darkteal\" -G Decimal=\"yellow\" -G Punctuation=\"lightgray\" --color=always"
#
# alias gmacs="open -a /Applications/Emacs.app"
# alias cmacs="/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -c -n ."
#
# alias clj-repl='docker run -i -t pandeiro/lein repl'
#
# alias muxl="mux local"
# alias muxk="tmux kill-session -t"
# alias muxle="vi .tmuxinator.yml"
# alias muxs="mux start"
# alias muxe="mux open"
