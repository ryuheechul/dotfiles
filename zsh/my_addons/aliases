# vim: set ft=zsh:

# define functions first so that it doesn't get affected by aliases being defined here

# to measure zsh performance - https://blog.mattclemente.com/2020/06/26/oh-my-zsh-slow-to-load.html
function timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

## these are convenient functions for getting information from package.json
## perhaps should be moved somewhere else than this file
function grep-npm-packages-with-keyword () {
  { echo '{' ; grep $1 package.json ; echo '}' } \
    | jq -n -f /dev/stdin \
    | jq -r 'keys | .[]' \
    | xargs
}

function grep-deleted-npm-packages () {
  function _grep-deleted-npm-packages () {
    gd --unified=0 package.json | cat | egrep -- '^- ' | sed s/-//
  }

  { echo '{' ; _grep-deleted-npm-packages ; echo '}' } \
    | jq -n -f /dev/stdin \
    | jq -r 'keys | .[]' \
    | xargs
}

## these benches can be used to compare between different systems
function bench () {
  start=$(date +%s)
  ${1}
  end=$(date +%s)
  echo "bench took $(($end-$start))s"
}

# from https://www.pcsuggest.com/benchmarking-linux-systems-with-simple-command-line-tools/
function simple_test_cpu () {
  i=0; while (( i < 9999999 )); do (( i ++ )); done
}

function simple_bench_cpu () {
  bench simple_test_cpu
}

# from https://cloudzy.com/knowledge-base/test-disk-speed-in-linux/
function simple_test_disk () {
  sync; dd if=/dev/zero of=temp_disk_test_file bs=1M count=1024; sync
  rm temp_disk_test_file
}

function simple_bench_disk () {
  bench simple_test_disk
}

# when I don't feel liking adding `| less` at the end
function show () {
  $@ | less -r -i
}

# use help like man
function help () {
  show $@ --help
}

# quickly jump via fsad - https://github.com/junegunn/fzf/wiki/examples#with-fasd-1
unalias j 2>/dev/null
function j() {
    [ $# -gt 0 ] && fasd_cd -d "$*" && return
    local dir
    dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
}

if uname | xargs test "Darwin" =; then
  function _sound_for_return() {
    expr $? = 0 > /dev/null && afplay /System/Library/Sounds/Funk.aiff || afplay /System/Library/Sounds/Purr.aiff
  }

  # getting notified on a job that takes some time (usually with `make`) turns out to be very helpful
  function notify() {
    start_time=$(date +%s)

    env time -p $@
    ret=$?

    # skip making sound for under 2 seconds
    test $(expr $(date +%s) - ${start_time}) -gt 2 && {
      expr ${ret} = 0 > /dev/null ; _sound_for_return
    }

    # print the date just before exit
    date

    # return the original result
    return ${ret}
  }

  # able to hook up completions for arbitrary command arguments
  # thanks to great hints from https://www.dolthub.com/blog/2021-11-15-zsh-completions-with-subcommands/
  # but this does not work well with subcommands of the commands at the moment.
  # but since `make` has no more depth it's OK for now.
  _notify() {
    local line state

    _arguments -C "1: :->cmds" "*::arg:->args"

    case "$state" in
      cmds)
        _exec # borrowing `_exec` completion function to list all commands
        ;;
      args)
        _${line[1]} # assume the command has its own completion function like `_make` defined
        ;;
    esac
  }

  # since compdef on regular sourcing doesn't seem to work
  zsh-defer compdef _notify notify

  alias make='notify make'

  # shorthand for other commands other than make - eg. `nt true` and `nt false`
  alias nt='notify'
fi

# this will return either `light` or `dark`
function theme-tone () {
  # assuming I only use `solarized-*`
  current-base16 | sed s/solarized-//
  # although below "works" it doesn't work well with my cached base16 shell eval - look at the end of ./shell_ext
  # printenv BASE16_THEME | sed s/solarized-//
}

# a helper script to quickly set git author in global config
function git-config-author() {
  function _print_config() {
    echo "git config --global user.${1}"
    git config --global user.${1}
  }

  echo 'printing current values...'
  _print_config name
  _print_config email
  echo

  echo 'git config --global user.name:'
  gum input --placeholder 'full name' | xargs -I _ git config --global user.name _
  _print_config name

  echo 'git config --global user.email:'
  gum input --placeholder 'email@address' | xargs -I _ git config --global user.email _
  _print_config email
}

# workaround to use SSH URL instead of HTTP
function git-override-url-to-ssh {
  if git rev-parse --show-toplevel > /dev/null; then
    config_path="$(git rev-parse --show-toplevel)/.git/config"

    cat <<EOF >> "${config_path}"

# No longer having to rewrite http urls to ssh ones manually
# thanks to https://www.jvt.me/posts/2019/03/20/git-rewrite-url-https-ssh
[url "ssh://git@github.com/"]
  insteadOf = https://github.com/
[url "ssh://git@gitlab.com/"]
  insteadOf = https://gitlab.com/
EOF

    echo "cat ${config_path}"
    cat "${config_path}"
fi
}

# https://www.stefanjudis.com/today-i-learned/suffix-aliases-in-zsh/
alias -s md=glow
alias -s {ts,tsx,js,jsx,json,yaml,yml,toml}=vi
alias -s {py,lua,nix}=vi
alias -s {conf,}=lf
alias -s {org,el}='emacsclient'
alias -s git='git clone'

alias gh='GLAMOUR_STYLE=$(theme-tone) gh'

# replace htop with bottom
alias htop='btm -b'
# overwrite essential stuff
alias which='which -a'
alias ping='gping'

# human friendly df and du
alias df='duf'
alias du='du -d 1 -h | sort -h -r'

# help avoiding seeing diff for long generated files - somehow `:(exclude)**/[filename]` doesn't seem to cover some cases so `:(exclude)[filename]` to complement it
exclude_for_pure="-- ':(exclude)package-lock.json' ':(exclude)**/package-lock.json' ':(exclude)lazy-lock.json' ':(exclude)**/lazy-lock.json'"
# git
alias tig='TERM=xterm-256color tig'
alias gs='pwd; ls; git status'
alias tgs='tig status'
alias gd='git diff'
alias gdc='gd --cached'
alias gdt='git difftool'
alias gdtc='gdt --cached'
alias gdp="gd ${exclude_for_pure}"
alias gdcp="gdc ${exclude_for_pure}"
alias gdtp="gdt ${exclude_for_pure}"
alias gdtcp="gdtc ${exclude_for_pure}"
# and just to help with typo
alias gd.='gd .'
alias gdc.='gdc .'

unalias gl
# envelop `git pull` with `stash` and `stash pop` when the status is not clean
function gl () {
  _git_status="$(git status -s)"

  test -n "${_git_status}" && git stash

  # avoid git stash pop when pull fails
  git pull --rebase || {
    test -n "${_git_status}" \
      && echo "didn't run git stash pop due to git pull failed"
    return
  }

  test -n "${_git_status}" && git stash pop
}

# this overwrites existing gap which is for git apply
alias gap='git add -p'

# git fix remote to ssh from https
alias gfssh="ambr --no-parent-ignore 'https://' 'ssh://git@' .git/config"

# editor
alias pathnvimlazy='echo "${HOME}/.local/share/nvim/lazy" | pbcopy ; pbpaste'
alias clearnvimswaps='rm -r ~/.local/state/nvim/swap'
alias vim='nvim'
alias vi='vim'

_dotfilepath="$(readlink -f ~/.config/dfs-rhc)"
_perflogpath="${_dotfilepath}/.perf.log"
## special modes
# start neovim purely without any plugins loaded
alias vil='my_nvim_plugins_default_to_lazy=1 vi'
alias vip='vi -u NONE'
# measure startup time
alias vips="rm -f ${_perflogpath} && vi --startuptime ${_perflogpath} ${_perflogpath}"
# to enable LuaCacheProfile
alias cim='NVIM_CACHE_PROFILE=1 vi'
# start neovim to profile interactively
alias pim='NVIM_PROFILE=1 vi'
# neovim with ghost
alias vig='my_nvim_ghost=1 vi'

# usage: sggh ryuheechul/hexto256 main.go
sggh ()
{
  nvim "sg://github.com/${1}/-/${2}"
}

# wrap `sk` to use TMUX_PANE when possible
sk ()
{
  # prevent running sk on home directory as there are too many things to read
  test "${PWD}" = "${HOME}" && { echo "${PWD}"; return; }

  if test -n "${TMUX_PANE}"; then
    sk-tmux $@
  else
    env sk $@
  fi
}

alias skp='sk --preview "preview {}"'

## convenient quick ways to select file to open in vim
# 1. in the current directory
alias v='skp | xargs ${EDITOR}'
# 2. in the git root directory
alias vv='grt; v; popd' # basically - `git rev-parse --show-toplevel || echo . | xargs pushd; v; popd`
# 3. my dotfiles
alias dot='pushd "${my_dot_d}"; v; popd'

# useful when the status of lazy.nvim seems not clean
# for now, it only print the command not run
alias clean-nvim-cmd='echo "rm -rf  ~/.local/share/nvim/lazy ~/.cache/nvim/lazy"'

# open in terminal using daemon process (create if it doesn't exist yet)
alias emacsclient="emacsclient -nw -c -a ''"

# just a dirty hack to make `emacs` command to use a handle which work more smoothly
# in terms of being able to activate the window like any other app on macOS
typeset -f emacs &> /dev/null && unfunction emacs
function emacs () {
  if test $# -eq 0; then
    if test -n "${SSH_CONNECTION}"; then
      emacsclient
    elif uname | xargs test "Darwin" =; then
      "${my_dot_d}/bin/path/darwin/open-gui-emacs"
    else
      emacsclient
    fi
  else
    emacsclient ${@}
  fi
}

# viewer and filter
alias vimdiff='nvim -dR'
alias diff='git diff --no-index'
alias less='less -r -i'
alias cat='bat'
alias k9s='TERM=xterm COLORTERM=256bit k9s'

## ripgrep
# alias rg='rg -p -i' # with pretty (-p) and ignore case (-i)
# enhanced the above alias using the function below to apply what's mentioned at https://github.com/BurntSushi/ripgrep/issues/86#issuecomment-1469717706
rg ()
{
  env rg --json $@ | delta
}
alias rgc='rg -C' # with context
alias rgc5='rgc 5' # with context value that is 5

alias glow='glow -p -s "$(theme-tone)"'

alias fzfp='fzf --height 100% --preview "bat --style=numbers --color=always {}"'
alias fzfpp='fzf|fpp'
alias fpp='wrapped-fpp'

# diff with bat
function bdiff () { diff -u $@ | bat;} # use `vimdiff` for editing
alias build-cache-bat='bat cache --build' # when there is a new syntax/theme to build

# shorthands
alias dc='docker-compose'
alias mp='multipass'
alias tf='terraform'
alias wttr='curl wttr.in'
alias cht='CHTSH_QUERY_OPTIONS="style=friendly" cht.sh'
alias chtsh='cht --shell'

# web search
alias googler='googler -n 3'
alias ddgr='ddgr -n 3'

# bascially `home-manager switch` + extra depends on platforms
# e.g. darwin will also do "switch" via nix-darwin
uname | xargs test "Darwin" = \
  && alias switch-nix='home-manager switch; pushd "$my_dot_d/nix/darwin" && make switch; popd' \
  || alias switch-nix='home-manager switch'

# commandify
alias fulltimezsh='FORCE_LOAD_MY_ZSH_STUFF=1 timezsh'
alias vzshrc='nvim ~/.zshrc'
alias sshconfig='cat ~/.ssh/config'
alias vsshconfig='nvim ~/.ssh/config'
alias touchreadme='touch README.md'
alias touchmakefile='touch Makefile'
alias weather='curl wttr.in'
alias shebang='echo "#!/usr/bin/env bash" | pbcopy ; pbpaste'
alias executable='chmod +x'
alias lf='UNSET_ALL_MY_ZSH_STUFF_LOADED=1 lf'
alias quickvenv='python3 -m venv "${MY_QUICK_VENV_PATH:-.venv}" && source "${MY_QUICK_VENV_PATH:-.venv}/bin/activate"'

alias nis='npm install --save'
alias nisd='npm install --save-dev'
alias whoami-aws='aws sts get-caller-identity'

# firstly fallback to `fg` when there is a background job is running
# secondly exit virtualenv if the shell is inside one
# lastly `exit` the shell when there no other conditions above are met
alias q='jobs | wc -l | xargs test 0 -eq && { test -n "${VIRTUAL_ENV}" && deactivate || exit } || fg'
alias e='fzf | xargs ${EDITOR}'
alias jqstringify='jq ". | tostring"'
alias jqfromjson='jq "fromjson"'
# more on it at https://www.cyberciti.biz/faq/unix-linux-check-if-port-is-in-use-command/
alias listopenports='lsof -i -P -n | grep LISTEN'

## quick ways to grep from espanso
# eml: only trigger the match
alias eml="espanso match list | fzf | sed -r 's/^(.*)[ ]-[ ].*$/\1/' | xargs espanso match exec -t"
# emls: trigger + sink the result into clipboard - use `vared` (similar to `read` in zsh) to sink the "typing" from espanso since it becomes stdin
alias emls="eml && vared -p '[Press ↵ to continue] ' -c _sink_espanso && echo \"\$_sink_espanso\" | tee /dev/tty | pbcopy"
# emlg: do the same as above but using builtin GUI
alias emlg="espanso cmd search" # or ALT + SPACE

_expand_newlines_unquoted_only()
{
  # line 1 - sed: mark `\\n` wrapped in '' to `tO_Restore-NEW_linE`
  # line 2 - sed: mark `\\n` wrapped in "" to `tO_Restore-NEW_linE`
  # line 3 - sed: now remained replace `\\n` to `\n` (actual newline)
  # line 4 - sed: finally replace `tO_Restore-NEW_linE` to `\\n` (not actual newline)
  sed -r ':repeat;s/["](.*)(\\n)(.*)["]/"\1tO_Restore-NEW_linE\3"/g;t repeat' \
    | sed -r ":repeat;s/['](.*)(\\\n)(.*)[']/'\1tO_Restore-NEW_linE\3'/g;t repeat" \
    | sed "s/\\\n/\n/g" \
    | sed "s/tO_Restore-NEW_linE/\\\n/g"

  # about sed repeat - https://stackoverflow.com/a/44786664/1570165
}

# a helper to grep from history to pbcopy                                 | uniq            | strip          |
# break it down  = history | recent first   | strip line  numbers         | for unsorted*   | leading spaces | strip one word commands    | fzf
alias grephistory='history | sort --reverse | sed "s/^\s*[0-9]*[*]*\s*//" | awk "!x[\$0]++" | sed "s/^\s*//" | sed "/^[a-zA-Z0-9]*\s*$/d" \
  | fzf | tr -d "\\n"      | _expand_newlines_unquoted_only | tee /dev/tty | pbcopy    ; echo'
# | fzf | delete the       | expand newlines                | print        | copy to   ; add newline
#       | trailing newline |                                | selected     | clipboard ;
# *about uniq for unsorted - https://github.com/junegunn/fzf/issues/270#issuecomment-1301876481

## these are replaced by ../../bin/local/pb[paste|copy]
#
# # bring `pbcopy` and `pbpaste` to linux
# test -z "${commands[pbcopy]}" \
#   && alias pbcopy='xsel -i -b'
#
# test -z "${commands[pbpaste]}" \
#   && alias pbpaste='xsel -o -b'

## legacy
#
# alias ccat="ccat -G Keyword=\"darkgreen\" -G Plaintext=\"ellow\" -G Tag=\"fuchsia\" -G HTMLAttrName=\"darkteal\" -G Decimal=\"yellow\" -G Punctuation=\"lightgray\" --color=always"
#
# alias gmacs="open -a /Applications/Emacs.app"
# alias cmacs="/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -c -n ."
#
# alias clj-repl='docker run -i -t pandeiro/lein repl'
#
# alias muxl="mux local"
# alias muxk="tmux kill-session -t"
# alias muxle="vi .tmuxinator.yml"
# alias muxs="mux start"
# alias muxe="mux open"
