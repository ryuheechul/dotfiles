%YAML 1.2
---
# copied from https://github.com/eugenesvk/sublime-KDL/blob/c65c12135e6cc604dc3ccf2878299c5a70f3bc57/KDL.sublime-syntax
name             : KDL
file_extensions  : [kdl]
scope            : source.kdl
version          : 2
# See Whitespace (Line breaking and non-Newline) at file end

# !sets don't allow whitespace even with (?x:), so watch out for [{{var}}] where var='(?x: abc)', 'x' will also be included
  # _digit _char = set-safe [{{var_s}}], i.e. contains only characters, no conditional matching groups
  # use syntax rules instead of variables that can't be recursive
  # lookaheads skip meta scopes, so might need to repeat them
# quote regexes with # : - { [ >
# Oniguruma regex engine features
  # rbuckton.github.io/regexp-features/engines/oniguruma.html
  # raw.githubusercontent.com/kkos/oniguruma/v6.9.1/doc/RE  6.8.0 2018/07/26 (not sure which version ST uses)
    # github.com/kkos/oniguruma/blob/master/doc/RE (latest)
# \k<> named group, while \g<> is recursion!
# include ignores meta patterns in the included contexts

# ident = identifier #ss#=set safe #ss!# set safe with exception
# _var = var rules can't be expressed within literal regexes, e.g., excluding keywords
variables:
  nodes:                    	'(?x: {{linespace_re}}*                                      	#
    (?##)                   	   ({{node}} {{nodes}}?)?                                    	#
    (?##)                   	      {{linespace_re}}*                                      	)' #
  node:                     	'(?x:                                                        	#
    (?##)                   	 (/\- {{node_space}}*)?                                      	# Slashdash comment
    (?##)                   	                       {{type}} ? {{ID}}                     	#
    (?##)                   	      ({{node_space}}+ {{node_prop_or_arg}} )*               	#
    (?##)                   	      ({{node_space}}* {{node_children}} {{ws}}*)?           	#
    (?##)                   	       {{node_space}}* {{node_terminator}}                   	)' #
  node_prop_or_arg:         	'(/\-{{node_space}}*)?({{prop}}|{{value}})'                  	#
  node_children:            	'(/\-{{node_space}}*)?{{{nodes}}}'                           	#
  node_space:               	'{{ws}}*{{escline}}{{ws}}*|{{ws}}+'                          	#
  node_sp_beg:              	'{{ws_beg}}|{{escline_beg}}'                                 	#
  line_sp_beg:              	'{{ws_beg}}|{{c_line_beg}}|{{nl_s}}'                         	#
  any_sp_t_beg:             	'{{node_sp_beg}}|{{node_term_beg}}'                          	#
  node_sp_end:              	'{{ws_end}}' #|{{escline_end}} ‚úó needs previous line         	#
  pre_val:                  	'^|\=|\)|{{node_sp_end}}'                                    	# line begin^ as line-cont surrogate
  ws_beg:                   	'{{b_sp}}|{{comment_block_beg}}'                             	#
  ws_end:                   	'{{b_sp}}|{{comment_block_end}}'                             	#
  node_terminator:          	'{{single_line_comment}}|{{newline}}|;|{{eof}}'              	#
  node_term_beg:            	'{{c_line_beg}}|;|{{eof}}|{{nl_s}}'                          	#
  node_term_beg_no_nl:      	'{{c_line_beg}}|;|{{eof}}'                                   	#
  #                         	                                                             	#
  # bareID:                 	'(?!{{keyword}}[^{{charID}}]){{bareID_or_KW}}'               	#
  bareID_or_KW:             	'{{bareID_ex_dig_sign}}|{{bareID_ex_dig}}'                   	#
  bareID_ex_dig_sign:       	'{{charID_ex_dig_sign}}{{charID}}*'                          	# pre-sign: exclude digit/sign to avoid clashes
  bareID_ex_dig:            	'[+-](?:{{charID_ex_dig}}{{charID}}*)?'                      	# pos-sign: exclude digit only
  charID:                   	'[[{{unicode_char}}]&&[^{{charWS}}]&&[^{{charID_not}}]]'     	#
  charID_not:               	'[\/\\(){}<>;\[\]=,"]'                                       	#
  charWS:                   	'[{{nl_s}}{{b_sp}}]'                                         	#
  charID_rec:               	'{{charID}}(?!{{linespace_re}})'                             	# set-unsafe; includes recursion: linespace ‚Üí ws ‚Üí multi_line_comment ‚Üí commented_blocküóò
  charID_ex_dig:            	'[[{{charID}}]&&[^{{d_dec}}]]'                               	#
  charID_ex_dig_sign:       	'[[{{charID_ex_dig}}]&&[^+-]]'                               	#
  unicode_char:             	'[\x{0021}-\x{10FFFF}]'                                      	# invalid: ‚â§0x20 or >0x10FFF)
  keyword:                  	'{{boolean}}|{{nil}}'                                        	#
  prop:                     	'{{ID}}={{value}}'                                           	#
  prop_eq:                  	'({{b_sp}}?)({{b_sp}}*)(=)({{b_sp}}?)({{b_sp}}*)'            	#
  value:                    	'{{type}}?({{string}}|{{number}}|{{keyword}})'               	#
  type:                     	'\({{ID}}\)'                                                 	#
  escaped_string:           	'"{{character}}*"'                                           	#
  character:                	'\\{{escape}}|[^"]'                                          	#
  escape:                   	'{{escape_char}}|{{escape_unicode}}'                         	#
  escape_char:              	'["\\/bfnrt]'                                                	#
  escape_unicode:           	'u{{{d_hex}}{1,6}}'                                          	#
  d_bin:                    	'[0-1]'                                                      	#
  d_bin_:                   	'[0-1_]'                                                     	#
  d_oct:                    	'[0-7]'                                                      	#
  d_oct_:                   	'[0-7_]'                                                     	#
  d_dec:                    	'[0-9]'                                                      	#
  d_dec_:                   	'[0-9_]'                                                     	#
  d_hex:                    	'[0-9a-fA-F]'                                                	#
  d_hex_:                   	'[0-9a-fA-F_]'                                               	#
  #                         	                                                             	#
  boolean:                  	'(?:true|false)'                                             	# data type 1/4
  nil:                      	'(?:null)'                                                   	# data type 2/4
  string:                   	'{{raw_string}}|{{escaped_string}}'                          	# data type 3/4
  number:                   	'{{decimal}}|{{hex}}|{{octal}}|{{binary}}'                   	# data type 4/4
  #    ‚Üìstring              	                                                             	#
  raw_string:               	 '(r)(#+)?(\")([\S\s]*?)(\")(\2)'                            	#
  raw_string_re:            	 'r{{raw_string_hash_re}}'                                   	#üóò
  raw_string_hash_re:       	'#{{raw_string_hash_re}}#|{{raw_string_quotes}}'             	#üóò
  raw_string_quotes:        	'".*"'                                                       	#
  string_beg:               	'"|r#*"'                                                     	# or (?!r)"|r#*"
  string_end:               	'"#*'                                                        	# or (?!r)"|r#*"
  #    ‚Üìnumber              	                                                             	#
  decimal:                  	      '([+-])?({{integer}})(\.{{integer}})?{{exponent}}?'    	#
  exponent:                 	'([eE])([+-])?({{integer}})'                                 	#
  integer:                  	'{{d_dec}}{{d_dec_}}*'                                       	# leading 0s are allowed
  #sign:                    	'[+-]'                                                  #ss# 	# using [+-] is cleaner than {{sign}}
  #                         	                                                             	#
  hex:                      	'([+-])?(0x)({{d_hex}}{{d_hex_}}*)'                          	#
  octal:                    	'([+-])?(0o)({{d_oct}}{{d_oct_}}*)'                          	#
  binary:                   	'([+-])?(0b)({{d_bin}}{{d_bin_}}*)'                          	#
  #                         	                                                             	#
  escline:                  	'\\{{ws}}*({{single_line_comment}}|{{nl_s}})'                	#
  escline_beg:              	'\\'                                                         	#
  linespace_re:             	'{{nl_s}}|{{ws}}|{{single_line_comment}}'                    	# set-unsafe; includes recursion: ws ‚Üí multi_line_comment ‚Üí commented_blocküóò
  char_linesp:              	'[{{nl_s}}{{b_sp}}{{c_beg}}]'                           #ss!#	# ex / but not precisely //
  newline:                  	'(?>\r\n?|[\x{A}\x{C}\x{85}\x{2028}\x{2029}])'               	# \R without \v
  nl_s:                     	'[\r\n\x{C}\x{85}\x{2028}\x{2029}]'                     #ss!#	# not precisely ‚ê§‚êä
  ws:                       	'{{bom}}|{{u_sp}}|{{multi_line_comment}}'                    	#
  b_sp:                     	'[{{bom}}{{u_sp}}]'                                     #ss# 	#
  bom:                      	'[\x{FEFF}]'                                                 	#
  unicode_space:            	'[[\s]&&[^{{nl_s}}]]'                                        	#
  single_line_comment:      	'({{c_line_beg}})([^{{nl_s}}]*)({{c_line_end}})'             	#
  single_line_comment_no_nl:	'({{c_line_beg}})([^{{nl_s}}]*)'                             	#
  multi_line_comment:       	'{{comment_block_beg}}{{commented_block}}'                   	# set-unsafe; recursion: commented_blocküóò
  c_beg:                    	'/'                                                          	#
  c_slashdash:              	'/-'                                                         	#
  c_line_beg:               	'//'                                                         	#
  c_line_end:               	'{{nl_s}}|{{eof}}'                                           	#
  eof:                      	'$(?!{{nl_s}})'                                              	#
  eof_x:                    	'(?=[\S\s]{{eof}})' # when ‚Üë bugs                            	#
  comment_block_beg:        	'/\*'                                                        	#
  comment_block_doc_beg:    	'{{comment_block_beg}}(!|\*(?!/))'                           	#
  commented_block:          	'\*/|({{multi_line_comment}}|\*|/|[^*/]+){{commented_block}}'	# !!! cant recurse vars, do via syntax
  comment_block_end:        	'\*/'                                                        	#
  comment_block_doc_end:    	'{{comment_block_end}}'                                      	#
  u_sp: '[\x{9}\x{20}\x{A0}\x{1680}\x{2000}\x{2001}\x{2002}\x{2003}\x{2004}\x{2005}\x{2006}\x{2007}\x{2008}\x{2009}\x{200A}\x{202F}\x{205F}\x{3000}]' #ss# #
  ID: '{{string}}|((?!({{keyword}})[^{{charID}}])({{bareID_ex_dig_sign}}|{{bareID_ex_dig}}))' # bugs as 'recursive' if replace inlined vars with the same combo var
  bareID:        '((?!({{keyword}})[^{{charID}}])({{bareID_ex_dig_sign}}|{{bareID_ex_dig}}))' # bugs as 'recursive' if replace inlined vars with the same combo var
  # ‚Üë excludes keywords, but string would be a pain to style

contexts:
  # prototype:
    # - include: wss
    # - include: comment_block‚à®doc
    # - meta_include_prototype: false
    # todo: bugs e.g. (a)/**/1 is a comment even if you exclude everywhere

  main:
    - meta_include_prototype: false
    - match : ''
      push  : #‚úó‚Å∞
      #- meta_scope        : dbg‚úó¬π
      - include: nodes

  nodes: #‚úó‚Å∞ ‚âà linespace* (node nodes?)? linespace*
    - include: linesp
    - include: ‚ÅÑ-‚à®node
    - include: anyüõë # todo disable? strict mode
    # - include: any-pop
  nodes‚ÅÑ-: #‚úó‚Å∞
    - include: linesp
    - include: ‚ÅÑ-‚à®node‚ÅÑ-
    - include: anyüõë # todo disable? strict mode
    # - include: any-pop

#‚Äî‚Äî‚Äî 0 Groups
  node-elements:          #‚úó¬≤
    - match               : (?={{node_sp_beg}}) # mandatory whitespace
      push                : #‚úó¬≥ push to require ws before each element
      #- meta_scope        : dbg‚úó¬≥node‚ê†arg‚à®prop‚à®child
      - include           : node‚ê†s
      - match             : '({{c_slashdash}})'
        scope             : comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
        pop               : 1
        set               :
        #- meta_scope      : dbg‚úó¬≥node‚ê†‚ÅÑ‚àíarg‚à®prop‚à®child
        - include         : node‚ê†s
        - include         : pop_pre‚ê§
        - include         : node_terminatorüõë3
        - include         : arg‚à®prop‚ÅÑ-
        - include         : child_block‚ÅÑ-
        - include         : pop # todo not style /- empty via branches above ‚Üë
        # - include         : Süõë¬πpre_s‚à®c‚à®t
      - include           : arg‚à®prop
      - include           : child_block
      - include           : node_terminator4  # ... but then an extra pop is needed
    - include             : child_block1
    - include             : node_terminator3
    - include             : Süõë¬πpre_s‚à®c‚à®t
    # - include: comments
    # - include: charüÜî¬¨
  node-elements‚ÅÑ-:        #‚úó¬≤
    - match               : (?={{node_sp_beg}}) # mandatory whitespace
      push                : #‚úó¬≥ push to require ws before each element
      #- meta_scope        : dbg‚úó¬≥node‚ê†_arg‚à®prop‚à®child‚ÅÑ-
      - include           : node‚ê†s
      - match             : '({{c_slashdash}})'
        scope             : comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
        pop               : 1
        set               : # no terminator, /-; illegal
        #- meta_scope      : dbg‚úónode‚ê†‚ÅÑ‚àíarg‚à®prop‚à®child‚ÅÑ‚àí
        - include         : node‚ê†s
        - include         : pop_pre‚ê§
        - include         : node_terminatorüõë3
        - include         : arg‚à®prop‚ÅÑ-
        - include         : child_block‚ÅÑ-
        - include         : pop # todo not style /- empty via branches above ‚Üë

      - include           : arg‚à®prop‚ÅÑ-
      - include           : child_block‚ÅÑ-
      - include           : node_terminator4‚ÅÑ-
    - include             : child_block1‚ÅÑ-
    - include             : node_terminator3‚ÅÑ-
    - include             : Süõë¬πpre_s‚à®c‚à®t

  string:
    - include: string-quoted-double
    - include: string-quoted-double-raw
  strings:
    - include: strings-quoted-double
    - include: strings-quoted-double-raw
  string‚ÅÑ-:
    - include: string-quoted-double‚ÅÑ-
    - include: string-quoted-double-raw‚ÅÑ-
  strings‚ÅÑ-:
    - include: strings-quoted-double‚ÅÑ-
    - include: strings-quoted-double-raw‚ÅÑ-
  number:
    - include: bin¬¶oct¬¶hex-partial
    - include: hexadecimal
    - include: octal
    - include: binary
    - include: int‚à®dec‚à®float
  number‚ÅÑ-:
    - include: bin¬¶oct¬¶hex‚ÅÑ-partial
    - include: hexadecimal‚ÅÑ-
    - include: octal‚ÅÑ-
    - include: binary‚ÅÑ-
    - include: int‚à®dec‚à®float‚ÅÑ-
  comments:
    - include: comment_block‚à®doc
    # - include: comment_slashdash
    - include: comment_line
  comment_block‚à®doc:
    - include: comment_block_doc
    - include: comment_block
  keyword:
    - include: keyword-partial
    - include: boolean
    - include: nil
  keyword‚ÅÑ-:
    - include: keyword-partial‚ÅÑ-
    - include: boolean‚ÅÑ-
    - include: nil‚ÅÑ-
  keywordüõë:
    - include: booleanüõë
    - include: nullüõë
  keywordüõë‚ÅÑ-:
    - include: booleanüõë‚ÅÑ-
    - include: nullüõë‚ÅÑ-
  keyword-partial: # avoid red flashes with unfinished typing
    - include: true-partial
    - include: false-partial
    - include: null-partial
  keyword-partial‚ÅÑ-:
    - include: true-partial‚ÅÑ-
    - include: false-partial‚ÅÑ-
    - include: null-partial‚ÅÑ-



#‚Äî‚Äî‚Äî 1 Node: \- type
  ‚ÅÑ-‚à®node:                #‚úó‚Å∞ ‚âù (/- node-space*)? type? identifier
    - match               : '{{c_slashdash}}'
      scope               : comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
      pop                 : 1
      push                : # pop+push: match gets NO meta_scope of the popped context (‚âàlookahead)
      - meta_scope        : comment.block.slash-dash.kdl #‚úó‚Å∞ # comment.line.slash-dash added last @content
      - include           : node‚ê†
      - include           : node_name‚ÅÑ-
    - include             : node_name
  ‚ÅÑ-‚à®node‚ÅÑ-:              #‚úó‚Å∞
    - match               : '{{c_slashdash}}'
      scope               : comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
      pop                 : 1
      push                : # pop+push: match gets NO meta_scope of the popped context (‚âàlookahead)
      - meta_scope        : comment.block.slash-dash.kdl #‚úó‚Å∞ # comment.line.slash-dash added last @content
      - include           : node‚ê†
      - include           : node_name‚ÅÑ-
    - include             : node_name‚ÅÑ-
  node_name:              #‚úó‚Å∞
    - match               : '(?=\()'
      push                :
      - meta_scope        : meta.node.kdl #‚úó¬πnode_name_t
      - include           : type-node
    - match               : '(?={{string_beg}}|{{bareID}})'
      push                :
      - meta_scope        : meta.node.kdl #‚úó¬πnode_name_s_b
      - include           : nodeID
  node_name‚ÅÑ-:            #‚úó‚Å∞
    - include             : line_continuation‚ÅÑ-
    - match               : '(?=\()'
      push                :
      - meta_scope        : meta.node.kdl #‚úó¬πnode_name‚ÅÑ‚Äì_t
      - include           : type-node‚ÅÑ-
    - match               : '(?={{string_beg}}|{{bareID}})'
      push                :
      - meta_scope        : meta.node.kdl #‚úó¬πnode_name‚ÅÑ‚Äì_s_b
      - include           : nodeID‚ÅÑ-

  type-node:              #‚úó¬π
    - match               : \(
      scope               : punctuation.separator.annotation.begin.kdl
      push                : #‚úó¬≤
      - meta_scope        : meta.annotation.kdl #‚úó¬≤m
      - meta_content_scope: entity.name.type.kdl #‚úó¬≤c
      - match             : '(?<=\()(\))|(\))'
        captures          :
          1:                invalid.illegal.muted.kdl #punctuation.separator.annotation.end.kdl invalid.illegal.position.kdl
          2:                punctuation.separator.annotation.end.kdl #‚úótypenode_close
        pop               : 2 # remove 1st annotation, 2 fixes a bug?
        set               : #‚úó¬π # push bugs even with pop, still get meta_content
        - include         : bspüõë¬πs # type should be glued to its value
        - include         : nodeID
        - include         : charüÜî¬¨
        - include         : anyüõës
      - include           : type-content-node
      - include           : typeüõë
  type-node‚ÅÑ-:            #‚úó¬π
    - match               : \(
      scope               : punctuation.separator.annotation.begin.kdl comment.line.slash-dash.kdl #‚úótypenode‚ÅÑ‚Äìopen
      push                : #‚úó¬≤
      - meta_scope        : meta.annotation.kdl #‚úó¬≤m
      - meta_content_scope: entity.name.type.kdl #‚úó¬≤c
      - match             : '(?<=\()(\))|(\))'
        captures          :
          1:                invalid.illegal.muted.kdl #punctuation.separator.annotation.end.kdl invalid.illegal.position.kdl
          2:                punctuation.separator.annotation.end.kdl comment.line.slash-dash.kdl #‚úótypenode‚ÅÑ‚Äìclose
        pop               : 2 # remove 1st annotation, 2 fixes a bug?
        set               : #‚úó¬π
        - include         : bspüõë¬πs # type should be glued to its value
        - include         : nodeID‚ÅÑ-
        - include         : charüÜî¬¨
        - include         : anyüõës
      - include           : type-content-node‚ÅÑ-
      - include           : typeüõë

  type-content-node:      #‚úó¬≤
    - include             : keywordüõë
    - match               : '(?={{string_beg}})' # string can't just use to ban "a""b"
      push                : #‚úó¬≥
      # - meta_scope        : dbgtype-content-node‚úó¬≥
      - include           : strings-quoted-double-raw-consecutiveüõë # ..gs allows popping later on )
      - include           : strings-quoted-double-consecutiveüõë
      - include           : strings
      - include           : pop_preÔºâ # remove ‚Üë
      - include           : anyüõës
    - include             : IDs_bare
  type-content-node‚ÅÑ-:
    - include             : keywordüõë‚ÅÑ-
    - match               : '(?={{string_beg}})' # string can't just use to ban "a""b"
      push                : #‚úó¬≥
      # - meta_scope        : dbgtype-content-node‚úó¬≥
      - include           : strings-quoted-double-raw-consecutiveüõë
      - include           : strings-quoted-double-consecutiveüõë
      - include           : strings‚ÅÑ-
      - include           : pop_preÔºâ # remove ‚Üë
      - include           : anyüõës
    - include             : IDs_bare



#‚Äî‚Äî‚Äî 2 Node Element: 1 Name
  nodeID:                 #‚úó¬π
    - include             : keywordsüõë
    - match               : '(?={{string_beg}})'
      push                : #‚úó¬≤
      - meta_scope        : entity.name.tag.node.kdl #‚úó¬≤
      - include           : string-quoted-double-raw-consecutiveüõë3
      - include           : string-quoted-double-consecutiveüõë3
      - include           : strings
      - include           : node-elements
      - include           : node_terminator3
    - include             : bare-after-stringüõë
    - match               : '{{bareID}}'
      scope               : entity.name.tag.node.kdl
      push                : #‚úó¬≤
      #- meta_scope        : dbg‚úó¬≤_nodeID‚Üínode_elements
      - include           : node-elements
      - include           : node_terminator3
      - include           : Süõës
  nodeID‚ÅÑ-:               #‚úó¬π
    - include             : keywords‚ÅÑ-üõë
    - match               : '(?={{string_beg}})'
      push                : #‚úó¬≤
      - meta_scope        : entity.name.tag.node.kdl #‚úó¬≤
      - include           : string-quoted-double-raw-consecutiveüõë3
      - include           : string-quoted-double-consecutiveüõë3
      - include           : strings‚ÅÑ-
      - include           : node-elements‚ÅÑ-
      - include           : node_terminator3‚ÅÑ-
    - include             : bare-after-stringüõë
    - match               : '{{bareID}}'
      scope               : entity.name.tag.node.kdl comment.line.slash-dash.kdl
      push                : #‚úó¬≤
      #- meta_scope        : dbg‚úó¬≤_nodeID‚Üínode-elements‚ÅÑ‚Äì
      - include           : node-elements‚ÅÑ-
      - include           : node_terminator3‚ÅÑ-
      - include           : Süõës

#‚Äî‚Äî‚Äî 2 Node Element: 2 Argument or 3 Property
  arg‚à®prop:               #‚úó¬≥
    # - include           : node‚ê†
    - include             : arg_typed
    - include             : arg_untyped‚à®prop
  arg‚à®prop‚ÅÑ-:             #‚úó¬≥
    # - include           : node‚ê†‚ÅÑ-
    - include             : arg_typed‚ÅÑ-
    - include             : arg_untyped‚à®prop‚ÅÑ-

  arg_untyped‚à®prop:       #‚úó¬≥
    - match               : '(?={{string_beg}})'
      branch_point        : ‚∏ô1‚Äúarg‚à®prop‚Äù
      branch              : #‚úó‚Å¥‚∏ô
        - ‚Äúarg‚Äù-‚∏ô1
        - ‚Äú‚öø‚Äù‚Çåv-‚∏ô1
    - match               : '(?={{charID}})'
      branch_point        : ‚∏ô2arg‚à®prop
      branch              : #‚úó‚Å¥‚∏ô
        - arg-‚∏ô2
        - ‚öø‚Çåv-‚∏ô2
  arg_untyped‚à®prop‚ÅÑ-:     #‚úó¬≥
    - match               : '(?={{string_beg}})'
      branch_point        : ‚∏ô1‚Äúarg‚à®prop‚Äù‚ÅÑ-
      branch              : #‚úó‚Å¥‚∏ô
        - ‚Äúarg‚Äù‚ÅÑ-‚∏ô1
        - ‚Äú‚öø‚Äù‚Çåv‚ÅÑ-‚∏ô1
    - match               : '(?={{charID}})'
      branch_point        : ‚∏ô2arg‚à®prop‚ÅÑ-
      branch              : #‚úó‚Å¥‚∏ô
        - arg‚ÅÑ-‚∏ô2
        - ‚öø‚Çåv‚ÅÑ-‚∏ô2

#‚Äî‚Äî‚Äî 2 Node Element: 2 Argument
  ‚Äúarg‚Äù-‚∏ô1:               #‚úó‚Å¥
    - meta_scope          : meta.argument.value.kdl meta.mapping.value.kdl #‚úó‚Å¥‚Äúarg‚Äù‚∏ô1
    - include             : ‚Äúarg‚Äù
    - include             : ‚Äúarg‚Äùüõë
    - include             : pop‚∏ô
  ‚Äúarg‚Äù‚ÅÑ-‚∏ô1:               #‚úó‚Å¥
    - meta_scope          : meta.argument.value.kdl meta.mapping.value.kdl #‚úó‚Å¥‚Äúarg‚Äù‚ÅÑ‚∏ô1
    - include             : ‚Äúarg‚Äù‚ÅÑ-
    - include             : ‚Äúarg‚Äùüõë
    - include             : pop‚∏ô
  arg-‚∏ô2:                 #‚úó‚Å¥
    - meta_scope          : meta.argument.value.kdl meta.mapping.value.kdl #‚úó‚Å¥arg‚∏ô2
    - match               : '{{prop_eq}}'
      fail                : ‚∏ô2arg‚à®prop
    - match               : '(\S*)(?==)'
      fail                : ‚∏ô2arg‚à®prop
    - include             : value
    - include             : valueüõë
    - include             : pop_pre‚ê§
    - include             : pop‚∏ô
  arg‚ÅÑ-‚∏ô2:                #‚úó‚Å¥
    - meta_scope          : meta.argument.value.kdl meta.mapping.value.kdl #‚úó‚Å¥arg‚ÅÑ_‚∏ô2
    - match               : '{{prop_eq}}'
      fail                : ‚∏ô2arg‚à®prop‚ÅÑ-
    - match               : '(\S*)(?==)'
      fail                : ‚∏ô2arg‚à®prop‚ÅÑ-
    - include             : value‚ÅÑ-
    - include             : valueüõë
    - include             : pop_pre‚ê§
    - include             : pop‚∏ô

  arg_typed:              #‚úó¬≥
    - match               : (?=\()
      set                 :
      - meta_scope        : meta.argument.value.kdl meta.mapping.value.kdl #‚úó¬≥typed
      - include           : type-value
  arg_typed‚ÅÑ-:            #‚úó¬≥
    - match               : (?=\()
      set                 :
      - meta_scope        : meta.argument.value.kdl meta.mapping.value.kdl #‚úó¬≥typed‚ÅÑ-
      - include           : type-value‚ÅÑ-
  ‚Äúarg‚Äù:                  #‚úó‚Å¥
    # - include             : string  # can't use as is since branch check comes after we're inside a string!
    - match               : '(?={{string_beg}})'
      push                : #‚úó‚Åµ
      # - meta_scope        : dbg‚Äúarg‚Äù‚úó‚Åµ
      - include           : string-quoted-double-raw-consecutiveüõë3
      - include           : string-quoted-double-consecutiveüõë3
      - include           : strings
      - match             : '{{prop_eq}}'
        fail              : ‚∏ô1‚Äúarg‚à®prop‚Äù
      - include           : pop3  # ¬πarg_untyped‚à®prop branch ¬≤‚Üë 3 exit
  ‚Äúarg‚Äù‚ÅÑ-:                #‚úó‚Å¥
    - match               : '(?={{string_beg}})'
      push                : #‚úó‚Åµ
      # - meta_scope        : dbg‚Äúarg‚Äù‚úó‚Åµ
      - include           : string-quoted-double-raw-consecutiveüõë3
      - include           : string-quoted-double-consecutiveüõë3
      - include           : strings‚ÅÑ-
      - match             : '{{prop_eq}}'
        fail              : ‚∏ô1‚Äúarg‚à®prop‚Äù‚ÅÑ-
      - include           : pop3  # ¬πarg_untyped‚à®prop branch ¬≤‚Üë 3 exit

  # arg:                    #‚úó‚Å¥
  #   - include             : type-value
  #   - include             : value
  #   - include             : valueüõë
  # arg‚ÅÑ-:                  #‚úó‚Å¥
  #   - include             : type-value‚ÅÑ-
  #   - include             : value‚ÅÑ-
  #   - include             : valueüõë

  value:                  #‚úó‚Å¥
    - include             : keyword
    - include             : string
    - include             : number
  value‚ÅÑ-:                #‚úó‚Å¥
    - include             : keyword‚ÅÑ-
    - include             : string‚ÅÑ-
    - include             : number‚ÅÑ-
  valüõë: # todo: combine?
    - include             : pop2_pre‚ê†
    - include             : pop2_pre‚ê§
    - include             : pop2_pre-term
    # - include             : pop2_pre-str
    # - include             : charüÜî¬¨
    # - include             : pop_preüÜî¬¨  # let previous layers deal with invalid chars
    - include             : chüõëpre‚ê†   # todo: or just scrap illegals? let unstyled content be the indicator
  valueüõë:
    - include             : valüõë
    - include             : chüõëpre_term
    - include             : chüõëpre-str
  ‚Äúarg‚Äùüõë:
    - include             : valüõë
    - include             : Süõëpre‚ê§

#‚Äî‚Äî‚Äî 2 Node Element: 3 Property
  ‚öø‚Çåv-‚∏ô2:                 #‚úó‚Å¥
    - meta_scope          : meta.property.kdl #‚úó‚Å¥‚öø‚Çåv‚∏ô
    - include             : ‚öø
  ‚öø‚Çåv‚ÅÑ-‚∏ô2:                #‚úó‚Å¥
    - meta_scope          : meta.property.kdl #‚úó‚Å¥‚öø‚Çåv‚ÅÑ‚Äì‚∏ô
    - include             : ‚öø‚ÅÑ-
  ‚öø:                      #‚úó‚Å¥
    - include             : keywordüõë
    - match               : '({{charID}}+)'
      scope               : entity.other.attribute-name.kdl
      pop                 : 1 # ‚Üë‚∏ô
      push                :
        - meta_scope      : meta.property.name.kdl meta.mapping.key.kdl #‚úó‚Å¥
        - include         : property‚Çå
        - include         : pop_pre-term # unblock errors from spoiling the whole line
  ‚öø‚ÅÑ-:                    #‚úó‚Å¥
    - include             : keywordüõë‚ÅÑ-
    - match               : '({{charID}}+)'
      scope               : entity.other.attribute-name.kdl comment.line.slash-dash.kdl
      pop                 : 1 # ‚Üë‚∏ô
      set                 :
        - meta_scope      : meta.property.name.kdl meta.mapping.key.kdl #‚úó‚Å¥
        - include         : property‚Çå‚ÅÑ-
        - include         : pop_pre-term

  ‚Äú‚öø‚Äù‚Çåv-‚∏ô1:
    - meta_scope          : meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
    - include             : ‚Äú‚öø‚Äù
  ‚Äú‚öø‚Äù‚Çåv‚ÅÑ-‚∏ô1:
    - meta_scope          : meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl comment.line.slash-dash.kdl
    - include             : ‚Äú‚öø‚Äù‚ÅÑ-
  ‚Äú‚öø‚Äù:
    - include             : strings # allows ‚Üì check to go through while 2nd consecutive string not possible since it'll be treated as a second argument and there is a condition that errors that
    - include             : property‚Çå
  ‚Äú‚öø‚Äù‚ÅÑ-:
    - include             : strings‚ÅÑ-
    - include             : property‚Çå‚ÅÑ-
  property‚Çå:              #‚úó‚Å¥
    - match               : '{{prop_eq}}'
      captures            :
        1:                  invalid.illegal.position.kdl
        2:                  invalid.illegal.muted.position.kdl
        3:                  meta.property.separator.kdl meta.mapping.separator.kdl punctuation.separator.key-value.kdl
        4:                  invalid.illegal.position.kdl
        5:                  invalid.illegal.muted.position.kdl
      pop                 : 1
      push                : property-value # todo: set bugs to clear
  property‚Çå‚ÅÑ-:            #‚úó‚Å¥
    - match               : '{{prop_eq}}'
      captures            :
        1:                  invalid.illegal.position.kdl
        2:                  invalid.illegal.muted.position.kdl
        3:                  meta.property.separator.kdl meta.mapping.separator.kdl punctuation.separator.key-value.kdl comment.line.slash-dash.kdl
        4:                  invalid.illegal.position.kdl
        5:                  invalid.illegal.muted.position.kdl
      pop                 : 1
      push                : property-value‚ÅÑ- # todo: set bugs to clear
  property-value:         #‚úó‚Å¥
    # - meta_scope          : # gets misapplied to =
    # - meta_content_scope  : # gets miremoved from some values that pop immediately like boolean #meta.property.value.kdl meta.mapping.value.kdl ‚úó‚Å¥
    - include             : comments
    - match               : (?=\()
      pop                 : 2 # ‚Üë‚∏ô to reach ¬≥ like arg_typed
      push                : #‚úó¬≥
      - meta_scope        : meta.property.value.kdl meta.mapping.value.kdl #‚úó¬≥prop_val_typ
      - include           : type-value
    - match               : (?!\() # required to apply proper context to value
      set                 : #‚úó‚Å¥
      - meta_scope        : meta.property.value.kdl meta.mapping.value.kdl #‚úó‚Å¥prop_val_untyp
      - include           : value
      - include           : valueüõë
    - include             : propertyüõë
  property-value‚ÅÑ-:       # ‚úó‚Å¥
    - meta_content_scope  : meta.property.value.kdl meta.mapping.value.kdl #‚úó‚Å¥
    - include             : comments‚ÅÑ-
    - match               : (?=\()
      pop                 : 2 # ‚öø‚Çåv‚ÅÑ-‚∏ô2 to reach ¬≥ like arg_typed‚ÅÑ-
      push                : #‚úó¬≥
      - meta_scope        : meta.property.value.kdl meta.mapping.value.kdl #‚úó¬≥prop‚ÅÑ‚Äì_typ_val
      - include           : type-value‚ÅÑ-
    - match               : (?!\() # required to apply proper context to value
      set                 : #‚úó‚Å¥
      - meta_scope        : meta.property.value.kdl meta.mapping.value.kdl #‚úó‚Å¥prop‚ÅÑ‚Äì_val_untyp
      - include           : value‚ÅÑ-
      - include           : valueüõë
    - include             : propertyüõë
  propertyüõë:
      - include           : pop_pre‚ê†
      - include           : pop_pre‚ê§
      - include           : pop_preüÜî¬¨     # let previous layers deal with invalid chars
      - include           : chüõëpre‚ê† # todo: or just scrap illegals? let unstyled content be the indicator
      - include           : Süõëpre‚ê§
      - include           : Süõës

#‚Äî‚Äî‚Äî Type-values
  type-value:             #‚úó¬≥
    - match               : \(
      scope               : punctuation.separator.annotation.begin.kdl
      push                : #‚úó‚Å¥
      - meta_scope        : meta.annotation.kdl #‚úó‚Å¥type_value
      - meta_content_scope: entity.name.type.kdl
      - match             : '(?<=\()(\))|(\))'
        captures          :
          1:                invalid.illegal.muted.kdl #punctuation.separator.annotation.end.kdl invalid.illegal.position.kdl
          2:                punctuation.separator.annotation.end.kdl
        pop               : 1 # remove ‚Üëannotation
        set               : # push bugs even with pop, still get meta_content
        - include         : bspüõë¬πs # type should be glued to its value
        - include         : value
        - include         : valueüõë
        - include         : pop2_pre-term # todo: sort which are best
        - include         : anyüõës
      - include           : type-name
      - include           : typeüõë
  type-value‚ÅÑ-:           #‚úó¬≥
    - match               : \(
      scope               : punctuation.separator.annotation.begin.kdl comment.line.slash-dash.kdl #‚úótypearg‚ÅÑ-
      push                : #‚úó‚Å¥
      - meta_scope        : meta.annotation.kdl #‚úó‚Å¥type-value‚ÅÑ‚Äì
      - meta_content_scope: entity.name.type.kdl comment.line.slash-dash.kdl
      - match             : '(?<=\()(\))|(\))'
        captures          :
          1:                invalid.illegal.muted.kdl #punctuation.separator.annotation.end.kdl invalid.illegal.position.kdl
          2:                punctuation.separator.annotation.end.kdl comment.line.slash-dash.kdl
        pop               : 1 # remove ‚Üëannotation
        set               : # push bugs even with pop, still get meta_content
        - include         : süõë¬πs
        - include         : value‚ÅÑ-
        - include         : valueüõë
        - include         : anyüõës
      - include           : type-name
      - include           : typeüõë

  type-name:              #‚úó‚Å¥ see type-content-node
    - include             : keywordüõë
    - match               : '(?={{string_beg}})'
      push                : #‚úó‚Åµ
      # - meta_scope        : dbgtype-name‚úó‚Åµ
      - include           : strings-quoted-double-raw-consecutiveüõë
      - include           : strings-quoted-double-consecutiveüõë
      - include           : strings
      - include           : pop_preÔºâ # remove ‚Üë
      - include           : anyüõës
    - include             : IDs_bare
  type-name‚ÅÑ-:
    - include             : keywordüõë‚ÅÑ-
    - match               : '(?={{string_beg}})'
      push                : #‚úó‚Åµ
      # - meta_scope        : dbgtype-name‚ÅÑ‚Äì‚úó‚Åµ
      - include           : strings-quoted-double-raw-consecutiveüõë
      - include           : strings-quoted-double-consecutiveüõë
      - include           : strings‚ÅÑ
      - include           : pop_preÔºâ # remove ‚Üë
      - include           : anyüõës
    - include             : IDs_bare
  # type-content: # fails due to the need to mandate 1value
    # - include             : keywordüõë
    # - include             : string
    # - include             : IDs_bare
  # type-content‚ÅÑ-:
  #   - include             : keywordüõë‚ÅÑ-
  #   - include             : string‚ÅÑ-
  #   - include             : IDs_bare
  typeüõë:
    - include             : charüÜî¬¨
    - include             : süõës
    - include             : Süõës




  IDs_bare:
    - match               : '({{bareID}})'
  ID_bare:
    - match               : '({{bareID}})'
      pop                 : 1

#‚Äî‚Äî‚Äî Values - Keywords
  boolean:
    - match               : \b(true|false)\b
      scope               : keyword.other.kdl constant.language.boolean.kdl
      pop                 : 2
  boolean‚ÅÑ-:
    - match               : \b(true|false)\b
      scope               : keyword.other.kdl constant.language.boolean.kdl comment.line.slash-dash.kdl
      pop                 : 2
  nil:
    - match               : '\b(null)\b'
      scope               : keyword.other.kdl constant.language.null.kdl
      pop                 : 2
  nil‚ÅÑ-:
    - match               : '\b(null)\b'
      scope               : keyword.other.kdl constant.language.null.kdl comment.line.slash-dash.kdl
      pop                 : 2

  # before     sp begin
  # after  = ) sp end (though can't detect line continuation, add that condition within line cont rule)
  true-partial: #\b bugs with n t|x
    - match               : '(?<={{pre_val}})(t|tr|tru)(?={{any_sp_t_beg}})'
      #scope               : dbg‚úótrue_partial punctuation.separator
      pop                 : 2
  true-partial‚ÅÑ-:
    - match               : '(?<={{pre_val}})(t|tr|tru)(?={{any_sp_t_beg}})'
      scope               : comment.line.slash-dash.kdl
      pop                 : 2
  false-partial:
    - match               : '(?<={{pre_val}})(f|fa|fal|fals)(?={{any_sp_t_beg}})'
      #scope               : dbg‚úófalse_partial entity.other.attribute-name.kdl
      pop                 : 2
  false-partial‚ÅÑ-:
    - match               : '(?<={{pre_val}})(f|fa|fal|fals)(?={{any_sp_t_beg}})'
      scope               : comment.line.slash-dash.kdl
      pop                 : 2
  null-partial:
    - match               : '(?<={{pre_val}})(n|nu|nul)(?={{any_sp_t_beg}})'
      pop                 : 2
  null-partial‚ÅÑ-:
    - match               : '(?<={{pre_val}})(n|nu|nul)(?={{any_sp_t_beg}})'
      scope               : comment.line.slash-dash.kdl
      pop                 : 2

  booleanüõë:
    - match               : '(true|false)(?=[^{{charID}}])'
      scope               : keyword.other.kdl constant.language.boolean.kdl invalid.illegal.position.kdl
  booleanüõë‚ÅÑ-:
    - match               : '(true|false)(?=[^{{charID}}])'
      scope               : keyword.other.kdl constant.language.boolean.kdl invalid.illegal.position.kdl comment.line.slash-dash.kdl
  nullüõë:
    - match               : '(null)(?=[^{{charID}}])'
      scope               : keyword.other.kdl constant.language.null.kdl invalid.illegal.position.kdl
  nullüõë‚ÅÑ-:
    - match               : '(null)(?=[^{{charID}}])'
      scope               : keyword.other.kdl constant.language.null.kdl invalid.illegal.position.kdl comment.line.slash-dash.kdl


#‚Äî‚Äî‚Äî Values - Strings
  string-quoted-double:
    - match               : '"'
      scope               : punctuation.definition.string.begin.kdl
      push                :
      - meta_scope        : meta.string.kdl string.quoted.double.kdl
      - match             : '"'
        scope             : punctuation.definition.string.end.kdl
        pop               : 3
      - include           : char-escaped
  string-quoted-double‚ÅÑ-:
    - match               : '"'
      scope               : punctuation.definition.string.begin.kdl comment.line.slash-dash.kdl
      push                :
      - meta_scope        : meta.string.kdl string.quoted.double.kdl
      - meta_content_scope: comment.line.slash-dash.kdl
      - match             : '"'
        scope             : punctuation.definition.string.end.kdl comment.line.slash-dash.kdl
        pop               : 3
      - include           : char-escaped‚ÅÑ-
  strings-quoted-double:
    - match               : '"'
      scope               : punctuation.definition.string.begin.kdl
      push                :
      - meta_scope        : meta.string.kdl string.quoted.double.kdl
      - match             : '"'
        scope             : punctuation.definition.string.end.kdl
        pop               : 1
      - include           : char-escaped
  strings-quoted-double‚ÅÑ-:
    - match               : '"'
      scope               : punctuation.definition.string.begin.kdl comment.line.slash-dash.kdl
      push                :
      - meta_scope        : meta.string.kdl string.quoted.double.kdl
      - meta_content_scope: comment.line.slash-dash.kdl
      - match             : '"'
        scope             : punctuation.definition.string.end.kdl comment.line.slash-dash.kdl
        pop               : 1
      - include           : char-escaped‚ÅÑ-
  char-escaped:
    - match               : '(\\)(({{escape_char}})|({{escape_unicode}}))'
      captures            :
        1:                 constant.character.escape.kdl
        3:                 constant.character.escape.kdl
        4:                 constant.character.escape.unicode.16-bit-hex.kdl
  char-escaped‚ÅÑ-:
    - match               : '(\\)(({{escape_char}})|({{escape_unicode}}))'
      captures            :
        1:                 constant.character.escape.kdl comment.line.slash-dash.kdl
        3:                 constant.character.escape.kdl comment.line.slash-dash.kdl
        4:                 constant.character.escape.unicode.16-bit-hex.kdl comment.line.slash-dash.kdl
  string-quoted-double-raw:
    - match               : '(r)(#*)(")'
      captures            :
        1:                 storage.type.string.kdl
        2:                 punctuation.definition.string.begin.kdl
        3:                 punctuation.definition.string.begin.kdl
      push                :
      - meta_scope        : meta.string.kdl string.quoted.double.raw.kdl
      - match             : '"\2' # ‚Üëmatch (#*)
        scope             : punctuation.definition.string.end.kdl
        pop               : 3
  string-quoted-double-raw‚ÅÑ-:
    - match               : '(r)(#*)(")'
      captures            :
        1:                 storage.type.string.kdl comment.line.slash-dash.kdl
        2:                 punctuation.definition.string.begin.kdl comment.line.slash-dash.kdl
        3:                 punctuation.definition.string.begin.kdl comment.line.slash-dash.kdl
      push                :
      - meta_scope        : meta.string.kdl string.quoted.double.raw.kdl
      - meta_content_scope: comment.line.slash-dash.kdl
      - match             : '"\2' # ‚Üëmatch (#*)
        scope             : punctuation.definition.string.end.kdl comment.line.slash-dash.kdl
        pop               : 3
  strings-quoted-double-raw:
    - match               : '(r)(#*)(")'
      captures            :
        1:                 storage.type.string.kdl
        2:                 punctuation.definition.string.begin.kdl
        3:                 punctuation.definition.string.begin.kdl
      push                :
      - meta_scope        : meta.string.kdl string.quoted.double.raw.kdl
      - match             : '"\2' # ‚Üëmatch (#*)
        scope             : punctuation.definition.string.end.kdl
        pop               : 1
  strings-quoted-double-raw‚ÅÑ-:
    - match               : '(r)(#*)(")'
      captures            :
        1:                 storage.type.string.kdl comment.line.slash-dash.kdl
        2:                 punctuation.definition.string.begin.kdl comment.line.slash-dash.kdl
        3:                 punctuation.definition.string.begin.kdl comment.line.slash-dash.kdl
      push                :
      - meta_scope        : meta.string.kdl string.quoted.double.raw.kdl
      - meta_content_scope: comment.line.slash-dash.kdl
      - match             : '"\2' # ‚Üëmatch (#*)
        scope             : punctuation.definition.string.end.kdl comment.line.slash-dash.kdl
        pop               : 1
  strings-quoted-double-consecutiveüõë: #
    - match               : '((?<=#)|(?<="))(")([^"]*")'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äù‚Äú‚Äùs
        3:                 invalid.illegal.muted.position.kdl #‚úó‚Äù‚Äú‚Äùs
    - match               : '((?<=#)|(?<="))(")([{{b_sp}}\S]*)'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äù‚Äús
        3:                 invalid.illegal.muted.position.kdl #‚úó‚Äù‚Äús
  string-quoted-double-consecutiveüõë3: #
    - match               : '((?<=#)|(?<="))(")([^"]*")'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äù‚Äú‚Äù3
        3:                 invalid.illegal.muted.position.kdl #‚úó‚Äù‚Äú‚Äù3
      push                :
      - include           : pop3
    - match               : '((?<=#)|(?<="))(")([{{b_sp}}\S]*)'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äù‚Äú3
        3:                 invalid.illegal.muted.position.kdl #‚úó‚Äù‚Äú3
      push                :
      - include           : pop3
  string-quoted-double-consecutiveüõë4:
    - match               : '((?<=#)|(?<="))(")([^"]*")'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äù‚Äú‚Äù4
        3:                 invalid.illegal.muted.position.kdl #‚úó‚Äù‚Äú‚Äù4
      push                :
      - include           : pop4
    - match               : '((?<=#)|(?<="))(")([{{b_sp}}\S]*)'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äù‚Äú4
        3:                 invalid.illegal.muted.position.kdl #‚úó‚Äù‚Äú4
      push                :
      - include           : pop4
  strings-quoted-double-raw-consecutiveüõë:
    - match               : '((?<=#)|(?<="))(r)((?<h>#*)\")([\S\s]*?)(\"\k<h>)'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú‚Äùs
        3:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú‚Äùs
        5:                 invalid.illegal.muted.position.kdl #‚úó‚Äùr‚Äú‚Äùs
        6:                 invalid.illegal.muted.position.kdl #‚úó‚Äùr‚Äú‚Äùs
    - match               : '((?<=#)|(?<="))(r)(#*)(")([{{b_sp}}\S]*)'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äús
        3:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äús
        4:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äús
        5:                 invalid.illegal.muted.position.kdl #‚úó‚Äùr‚Äús
  string-quoted-double-raw-consecutiveüõë3:
    - match               : '((?<=#)|(?<="))(r)((?<h>#*)\")([\S\s]*?)(\"\k<h>)'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú‚Äù3
        3:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú‚Äù3
        5:                 invalid.illegal.muted.position.kdl #‚úó‚Äùr‚Äú‚Äù3
        6:                 invalid.illegal.muted.position.kdl #‚úó‚Äùr‚Äú‚Äù3
      push                :
      - include           : pop3
    - match               : '((?<=#)|(?<="))(r)(#*)(")([{{b_sp}}\S]*)'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú3
        3:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú3
        4:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú3
        5:                 invalid.illegal.muted.position.kdl #‚úó‚Äùr‚Äú3
      push                :
      - include           : pop3
  string-quoted-double-raw-consecutiveüõë4:
    - match               : '((?<=#)|(?<="))(r)((?<h>#*)\")([\S\s]*?)(\"\k<h>)'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú‚Äù4
        3:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú‚Äù4
        5:                 invalid.illegal.muted.position.kdl #‚úó‚Äùr‚Äú‚Äù4
        6:                 invalid.illegal.muted.position.kdl #‚úó‚Äùr‚Äú‚Äù4
      push                :
      - include           : pop4
    - match               : '((?<=#)|(?<="))(r)(#*)(")([{{b_sp}}\S]*)'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú4
        3:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú4
        4:                 invalid.illegal.position.kdl #‚úó‚Äùr‚Äú4
        5:                 invalid.illegal.muted.position.kdl #‚úó‚Äùr‚Äú4
      push                :
      - include           : pop4
  bare-after-stringüõë: #
    - match               : '((?<=#)|(?<="))({{bareID}})([{{b_sp}}\S]*)'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äùbare
        6:                 invalid.illegal.muted.position.kdl #‚úó‚Äùbare
      push                :
      - include           : pop3
  bare-after-stringüõë4:
    - match               : '((?<=#)|(?<="))({{bareID}})([{{b_sp}}\S]*)'
      captures            :
        2:                 invalid.illegal.position.kdl #‚úó‚Äùbare
        6:                 invalid.illegal.muted.position.kdl #‚úó‚Äùbare
      push                :
      - include           : pop4


#‚Äî‚Äî‚Äî Values - Numbers
  int‚à®dec‚à®float:
    - match               : '([+-])?([0-9])' # leading zeros are allowed
      captures            :
        1:                  keyword.operator.arithmetic.kdl
      branch_point        : ‚∏ôint‚à®dec‚à®float
      branch              :
        - integer‚∏ô        # Integer literal
        - decimal‚∏ô        # Floating point literal (fraction)
        - float‚∏ô          # Floating point literal (exponent)
  int‚à®dec‚à®float‚ÅÑ-:
    - match               : '([+-])?([0-9])' # leading zeros are allowed
      captures            :
        1:                  keyword.operator.arithmetic.kdl comment.line.slash-dash.kdl
        2:                  comment.line.slash-dash.kdl
      branch_point        : ‚∏ôint‚à®dec‚à®float‚ÅÑ-
      branch              :
        - integer‚ÅÑ-‚∏ô
        - decimal‚ÅÑ-‚∏ô
        - float‚ÅÑ-‚∏ô
  fail‚∏ôint‚à®dec‚à®float-.:
    - match               : '\.'
      fail                : ‚∏ôint‚à®dec‚à®float
  fail‚∏ôint‚à®dec‚à®float‚ÅÑ-.:
    - match               : '\.'
      fail                : ‚∏ôint‚à®dec‚à®float‚ÅÑ-
  fail‚∏ôint‚à®dec‚à®float-‚ÑØ:
    - match               : '[eE]'
      fail                : ‚∏ôint‚à®dec‚à®float
  fail‚∏ôint‚à®dec‚à®float‚ÅÑ-‚ÑØ:
    - match               : '[eE]'
      fail                : ‚∏ôint‚à®dec‚à®float‚ÅÑ-
  integer‚∏ô:
    - meta_scope          : constant.numeric.value.kdl constant.numeric.integer.kdl
    - include             : fail‚∏ôint‚à®dec‚à®float-.
    - include             : fail‚∏ôint‚à®dec‚à®float-‚ÑØ
    - include             : digit‚ÇÅ‚ÇÄ_
    - include             : pop3‚∏ô
  integer‚ÅÑ-‚∏ô:
    - meta_scope          : constant.numeric.value.kdl constant.numeric.integer.kdl
    - include             : fail‚∏ôint‚à®dec‚à®float‚ÅÑ-.
    - include             : fail‚∏ôint‚à®dec‚à®float‚ÅÑ-‚ÑØ
    - include             : digit‚ÇÅ‚ÇÄ_‚ÅÑ-
    - include             : pop3‚∏ô
  decimal‚∏ô:                                       # Floating point literal (fraction)
    - meta_scope          : constant.numeric.value.kdl constant.numeric.decimal.kdl
    - include             : fail‚∏ôint‚à®dec‚à®float-‚ÑØ
    - include             : digit‚ÇÅ‚ÇÄ_
    - match               : '(\.)'
      scope               : punctuation.separator.decimal.kdl
      push                :
      - include           : fail‚∏ôint‚à®dec‚à®float-‚ÑØ
      - include           : digit‚ÇÅ‚ÇÄ_
      - include           : pop4
    - include             : pop3‚∏ô
  decimal‚ÅÑ-‚∏ô:
    - meta_scope          : constant.numeric.value.kdl constant.numeric.decimal.kdl
    - include             : fail‚∏ôint‚à®dec‚à®float‚ÅÑ-‚ÑØ
    - include             : digit‚ÇÅ‚ÇÄ_‚ÅÑ-
    - match               : '(\.)'
      scope               : punctuation.separator.decimal.kdl comment.line.slash-dash.kdl
      push                :
      - include           : fail‚∏ôint‚à®dec‚à®float‚ÅÑ-‚ÑØ
      - include           : digit‚ÇÅ‚ÇÄ_‚ÅÑ-
      - include           : pop4
    - include             : pop3‚∏ô
  float‚∏ô:                                         # Floating point literal (exponent)
    - meta_scope          : constant.numeric.value.kdl constant.numeric.float.kdl constant.numeric.significand.kdl
    - include             : digit‚ÇÅ‚ÇÄ_
    - include             : floatÔºé
    - include             : float‚ÑØpartial
    - include             : float‚ÑØ
    - include             : pop3‚∏ô
  float‚ÅÑ-‚∏ô:
    - meta_scope          : constant.numeric.value.kdl constant.numeric.float.kdl constant.numeric.significand.kdl
    - include             : digit‚ÇÅ‚ÇÄ_‚ÅÑ-
    - include             : floatÔºé‚ÅÑ-
    - include             : float‚ÑØ‚ÅÑ-partial
    - include             : float‚ÑØ‚ÅÑ-
    - include             : pop3‚∏ô
  floatÔºé:
    - match               : '(\.)'
      scope               : punctuation.separator.decimal.kdl
      push                :
      - include           : digit‚ÇÅ‚ÇÄ_
      - include           : pop
  floatÔºé‚ÅÑ-:
    - match               : '(\.)'
      scope               : punctuation.separator.decimal.kdl comment.line.slash-dash.kdl
      push                :
      - include           : digit‚ÇÅ‚ÇÄ_‚ÅÑ-
      - include           : pop
  float‚ÑØpartial:
    - match               : '([eE])([+-])?(?={{nl_s}})'
      captures            :
        1:                  punctuation.separator.exponent.kdl
        2:                  keyword.operator.arithmetic.kdl
      push                :
      - clear_scopes      : 1 # clear previous meta scope significand
      - meta_scope        : constant.numeric.exponent.kdl
      - include           : pop4
  float‚ÑØ‚ÅÑ-partial:
    - match               : '([eE])([+-])?(?={{nl_s}})'
      captures            :
        1:                  punctuation.separator.exponent.kdl comment.line.slash-dash.kdl
        2:                  keyword.operator.arithmetic.kdl comment.line.slash-dash.kdl
      push                :
      - clear_scopes      : 1 # clear previous meta scope significand
      - meta_scope        : constant.numeric.exponent.kdl
      - include           : pop4
  float‚ÑØ:
    - match               : '([eE])([+-])?([0-9])'
      captures            :
        1:                  punctuation.separator.exponent.kdl
        2:                  keyword.operator.arithmetic.kdl
      push                :
      - clear_scopes      : 1 # clear previous meta scope significand
      - meta_scope        : constant.numeric.exponent.kdl
      - include           : digit‚ÇÅ‚ÇÄ_
      - include           : pop4
  float‚ÑØ‚ÅÑ-:
    - match               : '([eE])([+-])?([0-9])'
      captures            :
        1:                  punctuation.separator.exponent.kdl comment.line.slash-dash.kdl
        2:                  keyword.operator.arithmetic.kdl comment.line.slash-dash.kdl
      push                :
      - clear_scopes      : 1 # clear previous meta scope significand
      - meta_scope        : constant.numeric.exponent.kdl
      - include           : digit‚ÇÅ‚ÇÄ_‚ÅÑ-
      - include           : pop4

  binary:                                         # Integer literal (binary)
    - match               : '(0b)(?=[0-1])'
      scope               : constant.numeric.base.kdl
      push                :
      - meta_scope        : constant.numeric.integer.binary.kdl
      - meta_content_scope: constant.numeric.value.kdl
      - include           : ‚Ñ§‚ÇÇ
  binary‚ÅÑ-:
    - match               : '(0b)(?=[0-1])'
      scope               : constant.numeric.base.kdl comment.line.slash-dash.kdl
      push                :
      - meta_scope        : constant.numeric.integer.binary.kdl
      - meta_content_scope: constant.numeric.value.kdl
      - include           : ‚Ñ§‚ÇÇ‚ÅÑ-
  octal:                                          # Integer literal (octal)
    - match               : '(0o)(?=[0-7])'
      scope               : constant.numeric.base.kdl
      push                :
      - meta_scope        : constant.numeric.integer.octal.kdl
      - meta_content_scope: constant.numeric.value.kdl
      - include           : ‚Ñ§‚Çà
  octal‚ÅÑ-:
    - match               : '(0o)(?=[0-7])'
      scope               : constant.numeric.base.kdl comment.line.slash-dash.kdl
      push                :
      - meta_scope        : constant.numeric.integer.octal.kdl
      - meta_content_scope: constant.numeric.value.kdl
      - include           : ‚Ñ§‚Çà‚ÅÑ-
  hexadecimal:                                    # Integer literal (hexadecimal)
    - match               : '(0x)(?=\h)'
      scope               : constant.numeric.base.kdl
      push                :
      - meta_scope        : constant.numeric.integer.hexadecimal.kdl
      - meta_content_scope: constant.numeric.value.kdl
      - include           : ‚Ñ§‚ÇÅ‚ÇÜ
  hexadecimal‚ÅÑ-:
    - match               : '(0x)(?=\h)'
      scope               : constant.numeric.base.kdl comment.line.slash-dash.kdl
      push                :
      - meta_scope        : constant.numeric.integer.hexadecimal.kdl
      - meta_content_scope: constant.numeric.value.kdl
      - include           : ‚Ñ§‚ÇÅ‚ÇÜ‚ÅÑ-

  bin¬¶oct¬¶hex-partial:
    - include             : binary-partial
    - include             : octal-partial
    - include             : hexadecimal-partial
  bin¬¶oct¬¶hex‚ÅÑ-partial:
    - include             : binary‚ÅÑ-partial
    - include             : octal‚ÅÑ-partial
    - include             : hexadecimal‚ÅÑ-partial
  binary-partial:
    - match               : '(0b)(?={{nl_s}})'
      scope               : constant.numeric.base.kdl
      push                :
      - meta_scope        : constant.numeric.integer.binary.kdl
      - include           : pop5
  binary‚ÅÑ-partial:
    - match               : '(0b)(?={{nl_s}})'
      scope               : constant.numeric.base.kdl comment.line.slash-dash.kdl
      push                :
      - meta_scope        : constant.numeric.integer.binary.kdl
      - include           : pop5
  octal-partial:
    - match               : '(0o)(?={{nl_s}})'
      scope               : constant.numeric.base.kdl
      push                :
      - meta_scope        : constant.numeric.integer.octal.kdl
      - include           : pop5
  octal‚ÅÑ-partial:
    - match               : '(0o)(?={{nl_s}})'
      scope               : constant.numeric.base.kdl comment.line.slash-dash.kdl
      push                :
      - meta_scope        : constant.numeric.integer.octal.kdl
      - include           : pop5
  hexadecimal-partial:
    - match               : '(0x)(?={{nl_s}})'
      scope               : constant.numeric.base.kdl
      push                :
      - meta_scope        : constant.numeric.integer.hexadecimal.kdl
      - include           : pop5
  hexadecimal‚ÅÑ-partial:
    - match               : '(0x)(?={{nl_s}})'
      scope               : constant.numeric.base.kdl comment.line.slash-dash.kdl
      push                :
      - meta_scope        : constant.numeric.integer.hexadecimal.kdl
      - include           : pop5

  # Values - Numbers (helpers) digit‚ÇÅ‚ÇÄ_
  # can't match repeatable group in a regex, so repeat a single digit match
  ‚Ñ§:
    - match               : '([0-9])' # leading zeros are allowed
      push                :
      - include           : digit‚ÇÅ‚ÇÄ_
      - include           : pop4
  ‚Ñ§‚ÅÑ-:
    - match               : '([0-9])'
      scope               : comment.line.slash-dash.kdl
      push                :
      - include           : digit‚ÇÅ‚ÇÄ_‚ÅÑ-
      - include           : pop4
  ‚Ñ§‚ÇÇ:
    - match               : '([0-1])'
      push                :
      - include           : digit‚ÇÇ_
      - include           : pop4
  ‚Ñ§‚ÇÇ‚ÅÑ-:
    - match               : '([0-1])'
      scope               : comment.line.slash-dash.kdl
      push                :
      - include           : digit‚ÇÇ_‚ÅÑ-
      - include           : pop4
  ‚Ñ§‚Çà:
    - match               : '([0-7])'
      push                :
      - include           : digit‚Çà_
      - include           : pop4
  ‚Ñ§‚Çà‚ÅÑ-:
    - match               : '([0-7])'
      scope               : comment.line.slash-dash.kdl
      push                :
      - include           : digit‚Çà_‚ÅÑ-
      - include           : pop4
  ‚Ñ§‚ÇÅ‚ÇÜ:
    - match               : '(\h)'
      push                :
      - include           : digit‚ÇÅ‚ÇÜ_
      - include           : pop4
  ‚Ñ§‚ÇÅ‚ÇÜ‚ÅÑ-:
    - match               : '(\h)'
      scope               : comment.line.slash-dash.kdl
      push                :
      - include           : digit‚ÇÅ‚ÇÜ_‚ÅÑ-
      - include           : pop4
  digit‚ÇÅ‚ÇÄ_:
    - match               : '(_)|([0-9])'
      captures            :
        1:                  punctuation.separator.number.kdl
  digit‚ÇÅ‚ÇÄ_‚ÅÑ-:
    - match               : '(_)|([0-9])'
      captures            :
        1:                  punctuation.separator.number.kdl comment.line.slash-dash.kdl
        2:                  comment.line.slash-dash.kdl
  digit‚ÇÇ_:
    - match               : '(_)|([0-1])'
      captures            :
        1:                  punctuation.separator.number.kdl
  digit‚ÇÇ_‚ÅÑ-:
    - match               : '(_)|([0-1])'
      captures            :
        1:                  punctuation.separator.number.kdl comment.line.slash-dash.kdl
        2:                  comment.line.slash-dash.kdl
  digit‚Çà_:
    - match               : '(_)|([0-7])'
      captures            :
        1:                  punctuation.separator.number.kdl
  digit‚Çà_‚ÅÑ-:
    - match               : '(_)|([0-7])'
      captures            :
        1:                  punctuation.separator.number.kdl comment.line.slash-dash.kdl
        2:                  comment.line.slash-dash.kdl
  digit‚ÇÅ‚ÇÜ_:
    - match               : '(_)|([0-9a-fA-F])'
      captures            :
        1:                  punctuation.separator.number.kdl
  digit‚ÇÅ‚ÇÜ_‚ÅÑ-:
    - match               : '(_)|([0-9a-fA-F])'
      captures            :
        1:                  punctuation.separator.number.kdl comment.line.slash-dash.kdl
        2:                  comment.line.slash-dash.kdl


#‚Äî‚Äî‚Äî 2 Node Element: 4 Child
  child_block:
    - match               : '{'
      scope               : punctuation.section.mapping.begin.kdl
      push                : child_block-body
  child_block1:
    - match               : '{'
      scope               : punctuation.section.mapping.begin.kdl
      push                : child_block1-body
  child_block4:
    - match               : '{'
      scope               : punctuation.section.mapping.begin.kdl #‚úóchblock4
      push                : child_block4-body
  child_block‚ÅÑ-:
    - match               : '{'
      scope               : punctuation.section.mapping.begin.kdl comment.line.slash-dash.kdl
      push                : child_block-body‚ÅÑ-
  child_block1‚ÅÑ-:
    - match               : '{'
      scope               : punctuation.section.mapping.begin.kdl comment.line.slash-dash.kdl
      push                : child_block1-body‚ÅÑ-
  child_block4‚ÅÑ-:
    - match               : '{'
      scope               : punctuation.section.mapping.begin.kdl comment.line.slash-dash.kdl
      push                : child_block4-body‚ÅÑ-
  child_block-body:
    - meta_scope          : meta.block.child.kdl
    - include             : wss
    - include             : comment_line_no‚ê§
    - match               : '}'
    # - match               : '}|(?<=})' # alternative to hunting down space} to highlight the missing ;
    # - match               : '}|(?!{{nl_s}})(?<=})' # better alternative to avoid end} breaking next }
      scope               : punctuation.section.mapping.end.kdl
      pop                 : 3
      push                :
      - include           : wss
      - include           : node_terminator3
      - include           : Süõë¬πpre‚ê§
    - match               : '(?=\S)'
      push                : nodes
  child_block1-body:
    - meta_scope          : meta.block.child.kdl
    - include             : wss
    - include             : comment_line_no‚ê§
    - match               : '}'
    # - match               : '}|(?!{{nl_s}})(?<=})' # alternative to hunting down space} to highlight the missing ;
      scope               : punctuation.section.mapping.end.kdl
      pop                 : 2
      push                :
      - include           : wss
      - include           : node_terminator3
      - include           : Süõë¬πpre‚ê§
    - match               : '(?=\S)'
      push                : nodes
  child_block4-body:
    - meta_scope          : meta.block.child.kdl #‚úóchblock4_body
    - include             : wss
    - include             : comment_line_no‚ê§
    - match               : '}'
    # - match               : '}|(?!{{nl_s}})(?<=})' # alternative to hunting down space} to highlight the missing ;
      scope               : punctuation.section.mapping.end.kdl
      pop                 : 3
      push                :
      - include           : wss
      - include           : node_terminator4
      - include           : Süõë¬πpre‚ê§
    - match               : '(?=\S)'
      push                : nodes
  child_block-body‚ÅÑ-:
    - meta_scope          : meta.block.child.kdl
    - include             : wss
    - include             : comment_line_no‚ê§
    - match               : '}'
    # - match               : '}|(?!{{nl_s}})(?<=})' # alternative to hunting down space} to highlight the missing ;
      scope               : punctuation.section.mapping.end.kdl
      pop                 : 3
      push                :
      - include           : wss
      - include           : node_terminator3‚ÅÑ-
      - include           : Süõë¬πpre‚ê§
    - match               : '(?=\S)'
      push                : nodes‚ÅÑ-
  child_block1-body‚ÅÑ-:
    - meta_scope          : meta.block.child.kdl
    - include             : wss
    - include             : comment_line_no‚ê§
    - match               : '}'
    # - match               : '}|(?!{{nl_s}})(?<=})' # alternative to hunting down space} to highlight the missing ;
      scope               : punctuation.section.mapping.end.kdl
      pop                 : 2
      push                :
      - include           : wss
      - include           : node_terminator3‚ÅÑ-
      - include           : Süõë¬πpre‚ê§
    - match               : '(?=\S)'
      push                : nodes‚ÅÑ-
  child_block4-body‚ÅÑ-:
    - meta_scope          : meta.block.child.kdl
    - include             : wss
    - include             : comment_line_no‚ê§
    - match               : '}'
    # - match               : '}|(?!{{nl_s}})(?<=})' # alternative to hunting down space} to highlight the missing ;
      scope               : punctuation.section.mapping.end.kdl
      pop                 : 3
      push                :
      - include           : wss
      - include           : node_terminator4‚ÅÑ-
      - include           : Süõë¬πpre‚ê§
    - match               : '(?=\S)'
      push                : nodes‚ÅÑ-


#‚Äî‚Äî‚Äî 2 Node Element: 5 End
  node_terminator:        # ‚âù node-terminator : single-line-comment | newline | ";" | eof
    - include             : comment_line
    - include             : ‚ê§
    - include             : eof
    # - include             : popÔΩù
    - match               : ;
      scope               : punctuation.terminator.node.kdl
      pop                 : 1
    - include             : ÔΩùüõë
  node_terminatorüõë2:
    - include             : comment_lineüõë2
    - include             : ‚ê§üõë2
    # - include             : eof
    - match               : ;
      scope               : invalid.illegal.position.kdl
      pop                 : 2
    - include             : ÔΩùüõë2
  node_terminatorüõë3:
    - include             : comment_lineüõë3
    - include             : ‚ê§üõë3
    # - include             : eof
    - match               : ;
      scope               : invalid.illegal.position.kdl
      pop                 : 3
    - include             : ÔΩùüõë3
  node_terminator‚ÅÑ-:
    - include             : comment_line‚ÅÑ-
    - include             : ‚ê§
    - include             : eof
    # - include             : popÔΩù
    - match               : ;
      scope               : punctuation.terminator.node.kdl comment.line.slash-dash.kdl
      pop                 : 1
    - include             : ÔΩùüõë
  node_terminator2:       # X pops to allow the convenience of earlier pushes to e.g. track node level and ensure arguments have mandatory ws
    - include             : comment_line2_term
    - include             : ‚ê§term2
    - include             : eof2
    - match               : ;
      scope               : punctuation.terminator.node.kdl
      pop                 : 2
    - include             : ÔΩùüõë2
  node_terminator2‚ÅÑ-:
    - include             : comment_line2_term‚ÅÑ-
    - include             : ‚ê§term2
    - include             : eof2
    - match               : ;
      scope               : punctuation.terminator.node.kdl comment.line.slash-dash.kdl
      pop                 : 2
    - include             : ÔΩùüõë2
  node_terminator3:
    - include             : comment_line3_term
    - include             : ‚ê§term3
    - include             : eof3
    - match               : ;
      scope               : punctuation.terminator.node.kdl
      pop                 : 3
    - include             : ÔΩùüõë3
  node_terminator3‚ÅÑ-:
    - include             : comment_line3_term‚ÅÑ-
    - include             : ‚ê§term3
    - include             : eof3
    - match               : ;
      scope               : punctuation.terminator.node.kdl comment.line.slash-dash.kdl #‚úón_term3‚ÅÑ‚Äì
      pop                 : 3
    - include             : ÔΩùüõë3
  node_terminator4:
    - include             : comment_line4_term
    - include             : ‚ê§term4
    - include             : eof4
    - match               : ;
      scope               : punctuation.terminator.node.kdl
      pop                 : 4
    - include             : ÔΩùüõë4
  node_terminator4‚ÅÑ-:
    - include             : comment_line4_term‚ÅÑ-
    - include             : ‚ê§term4
    - include             : eof4
    - match               : ;
      scope               : punctuation.terminator.node.kdl comment.line.slash-dash.kdl
      pop                 : 4
    - include             : ÔΩùüõë4

  preÔΩùüõë:                # missing node terminator before }, requires hunting down for space before }, which nodespace or other rule can handle already
    - match               : '{{b_sp}}*?({{b_sp}})?(?=\})'
      captures            :
        1:                  invalid.illegal.kdl
      pop                 : 1
  ÔΩùüõë:
    - match               : \}
      scope               : punctuation.section.mapping.end.kdl invalid.illegal.position.kdl #‚úóÔΩùüõë
      pop                 : 1
  ÔΩùüõë2:
    - match               : \}
      scope               : punctuation.section.mapping.end.kdl invalid.illegal.position.kdl #‚úóÔΩùüõë2
      pop                 : 2
  ÔΩùüõë3:
    - match               : \}
      scope               : punctuation.section.mapping.end.kdl invalid.illegal.position.kdl #‚úóÔΩùüõë3
      pop                 : 3
      push                :
      - include           : wss
      - include           : node_terminator3
      - include           : Süõë¬πpre‚ê§

  ÔΩùüõë4:
    - match               : \}
      scope               : punctuation.section.mapping.end.kdl invalid.illegal.position.kdl #‚úóÔΩùüõë4
      pop                 : 4
      push                :
      - include           : wss
      - include           : node_terminator3
      - include           : Süõë¬πpre‚ê§
  ÔΩù:
    - match               : '(?=\})'
      pop                 : 1
  ÔΩù2:
    - match               : '(?=\})'
      pop                 : 2
  ÔΩù3:
    - match               : '(?=\})'
      pop                 : 3
  ÔΩù4:
    - match               : '(?=\})'
      pop                 : 4

  line_continuation:      # ‚âù escline = \ ws* (single-line-comment     | newline)
                          #                  =‚Üësingle-line-comment_no_nl newline
    - match               : \\
      scope               : punctuation.separator.continuation.line.kdl #‚úólc
      push                : line_continuation-line1
  line_continuation‚ÅÑ-:
    - match               : \\
      scope               : punctuation.separator.continuation.line.kdl comment.line.slash-dash.kdl #‚úólc‚ÅÑ‚Äì
      push                : line_continuation‚ÅÑ-line1
  line_continuations:
    - match               : \\
      scope               : punctuation.separator.continuation.line.kdl #‚úólcs
      push                : line_continuations-line1
  line_continuation-line1:
    - include             : wss                         # ‚âù ... ws*
    - include             : comment_line_no‚ê§           # ‚âù ... single-line-comment (without newline, so ‚Üì captures)
    - match               : '({{nl_s}})'                # ‚âù ... newline
      #scope               : dbg‚úóline_continuation-line1
      set                 : line_continuation-line_next
    - include             : Süõës
  line_continuation‚ÅÑ-line1:
    - include             : wss                         # ‚âù ... ws*
    - include             : comment_line_no‚ê§           # ‚âù ... single-line-comment (without newline, so ‚Üì captures)
    - match               : '({{nl_s}})'                # ‚âù ... newline
      set                 : line_continuation‚ÅÑ-line_next
    - include             : Süõës
  line_continuations-line1:
    #- meta_scope          : dbg‚úóline_continuations-line1
    # - include             : keyword-partial
    - include             : wss
    - include             : comment_line_no‚ê§
    - match               : '({{nl_s}})'
      set                 : line_continuations-line_next
    - include             : Süõës
  line_continuation-line_next:
    - include             : wss
    - include             : comment_line_no‚ê§
    - include             : ‚ê§üõë
    - match               : \\                          # disallows repeated
      scope               : punctuation.separator.continuation.line.kdl invalid.illegal.position.kdl
      # pop                 : 1                         # disallows 2nd \, but not 3rd+
    - include             : else-pop
    # - include             : else-pop2                   # 2 disallows repeated \, but requires extra push before use
  line_continuation‚ÅÑ-line_next:
    - include             : wss
    - include             : comment_line_no‚ê§
    - include             : ‚ê§üõë
    - match               : \\                          # disallows repeated
      scope               : punctuation.separator.continuation.line.kdl invalid.illegal.position.kdl comment.line.slash-dash.kdl
    - include             : else-pop
  line_continuations-line_next:
    - include             : wss
    - include             : comment_lines_no‚ê§
    - include             : ‚ê§üõës # todo: change to 1
    - include             : else-pop


#‚Äî‚Äî‚Äî Comments
  comment_block_doc       :                       # Block documentation comment
    - match               : '({{comment_block_doc_beg}})'
      scope               : punctuation.definition.comment.begin.kdl
      push                :
      - meta_scope        : comment.block.documentation.kdl
      - match             : '{{comment_block_end}}'
        scope             : punctuation.definition.comment.end.kdl
        pop               : 1
      - include           : comment_block_doc
      - include           : comment_block
  comment_block           :                       # Block comment
    - match               : '({{comment_block_beg}})'
      scope               : punctuation.definition.comment.begin.kdl
      push                :
      - meta_scope        : comment.block.kdl
      - match             : '{{comment_block_end}}'
        scope             : punctuation.definition.comment.end.kdl
        pop               : 1
      - include           : comment_block_doc
      - include           : comment_block
  comment_line:                                   # Single-line comment
    - match               : // # better than {{single_line_comment}} as doesn't consume the whole line and allows embedding with early popping
      scope               : punctuation.definition.comment.begin.kdl
      push                :
        - meta_scope      : comment.line.double-slash.kdl
        - match           : $({{newline}})? # consume ‚ê§ not to show completions when typing comments
          pop             : 2
          captures        :
            1:              punctuation.definition.comment.end.kdl
  comment_lineüõë:
    - match               : //
      scope               : invalid.illegal.position.kdl
      push                :
        - meta_scope      : comment.line.double-slash.kdl
        - match           : $({{newline}})?
          pop             : 2
          captures        :
            1:              punctuation.definition.comment.end.kdl
  comment_lineüõë2:
    - match               : //
      scope               : invalid.illegal.position.kdl
      push                :
        - meta_scope      : comment.line.double-slash.kdl
        - match           : $({{newline}})?
          pop             : 3
          captures        :
            1:              punctuation.definition.comment.end.kdl
  comment_lineüõë3:
    - match               : //
      scope               : invalid.illegal.position.kdl
      push                :
        - meta_scope      : comment.line.double-slash.kdl
        - match           : $({{newline}})?
          pop             : 4
          captures        :
            1:              punctuation.definition.comment.end.kdl
  comment_line2_term:
    - match               : //
      scope               : punctuation.definition.comment.begin.kdl punctuation.terminator.node.kdl
      push                :
        - meta_scope      : comment.line.double-slash.kdl
        - match           : $({{newline}})?
          pop             : 3
          captures        :
            1:              punctuation.definition.comment.end.kdl
  comment_line3_term:
    - match               : //
      scope               : punctuation.definition.comment.begin.kdl punctuation.terminator.node.kdl
      push                :
        - meta_scope      : comment.line.double-slash.kdl
        - match           : $({{newline}})?
          pop             : 4
          captures        :
            1:              punctuation.definition.comment.end.kdl
  comment_line4_term:
    - match               : //
      scope               : punctuation.definition.comment.begin.kdl punctuation.terminator.node.kdl
      push                :
        - meta_scope      : comment.line.double-slash.kdl
        - match           : $({{newline}})?
          pop             : 5
          captures        :
            1:              punctuation.definition.comment.end.kdl
  comment_line‚ÅÑ-:
    - match               : //
      scope               : punctuation.definition.comment.begin.kdl comment.line.slash-dash.kdl
      push                :
        - meta_scope      : comment.line.double-slash.kdl comment.line.slash-dash.kdl
        - match           : $({{newline}})?
          pop             : 2
          captures        :
            1:              punctuation.definition.comment.end.kdl comment.line.slash-dash.kdl
  comment_line2_term‚ÅÑ-:
    - match               : //
      scope               : punctuation.definition.comment.begin.kdl punctuation.terminator.node.kdl comment.line.slash-dash.kdl
      push                :
        - meta_scope      : comment.line.double-slash.kdl comment.line.slash-dash.kdl
        - match           : $({{newline}})?
          pop             : 4
          captures        :
            1:              punctuation.definition.comment.end.kdl comment.line.slash-dash.kdl
  comment_line3_term‚ÅÑ-:
    - match               : //
      scope               : punctuation.definition.comment.begin.kdl punctuation.terminator.node.kdl comment.line.slash-dash.kdl
      push                :
        - meta_scope      : comment.line.double-slash.kdl comment.line.slash-dash.kdl
        - match           : $({{newline}})?
          pop             : 4
          captures        :
            1:              punctuation.definition.comment.end.kdl punctuation.terminator.node.kdl comment.line.slash-dash.kdl
  comment_line4_term‚ÅÑ-:
    - match               : //
      scope               : punctuation.definition.comment.begin.kdl comment.line.slash-dash.kdl
      push                :
        - meta_scope      : comment.line.double-slash.kdl comment.line.slash-dash.kdl
        - match           : $({{newline}})?
          pop             : 5
          captures        :
            1:              punctuation.definition.comment.end.kdl comment.line.slash-dash.kdl
  comment_line_no‚ê§:                             # Single-line comment without capturing ending ‚ê§
    - match               : //
      scope               : punctuation.definition.comment.begin.kdl #‚úócline_no‚ê§
      push                :
        - meta_scope      : comment.line.double-slash.kdl
        - match           : $
          pop             : 1
  comment_line2_no‚ê§:
    - match               : //
      scope               : punctuation.definition.comment.begin.kdl #‚úócline_no‚ê§
      push                :
        - meta_scope      : comment.line.double-slash.kdl
        - match           : $
          pop             : 2
  comment_lines_no‚ê§:
    - match               : //
      scope               : punctuation.definition.comment.begin.kdl #‚úócline_no‚ê§
      push                :
        - meta_scope      : comment.line.double-slash.kdl
        - match           : $
          pop             : 1

# Primitives, with some ~matching KDL Spec elements
  linesp:                 # ‚âù linespace : newline | ws | single-line-comment
    - include             : ‚ê§
    - include             : ws
    - include             : comment_line #todo: bugs with } on a line after //
    # - include             : comment_line_no‚ê§
  ‚ê§s:
    - match               : '{{newline}}'
      #scope               : dbg‚úó‚ê§s
  ‚ê§:
    - match               : '{{newline}}'
      #scope               : dbg‚úó‚ê§
      pop                 : 1
  ‚ê§term2:
    - match               : '{{newline}}'
      scope               : punctuation.terminator.node.kdl #‚úó‚ê§2
      pop                 : 2
  ‚ê§term3:
    - match               : '{{newline}}'
      scope               : punctuation.terminator.node.kdl #‚úó‚ê§3
      pop                 : 3
  ‚ê§term4:
    - match               : '{{newline}}'
      scope               : punctuation.terminator.node.kdl #‚úó‚ê§4
      pop                 : 4
  eof:
    - match               : '{{eof}}'
      #scope               : dbg‚úóeof
      pop                 : 1
  eof2:
    - match               : '{{eof}}'
      #scope               : dbg‚úóeof
      pop                 : 2
  eof3:
    - match               : '{{eof}}'
      #scope               : dbg‚úóeof
      pop                 : 3
  eof4:
    - match               : '{{eof}}'
      #scope               : dbg‚úóeof
      pop                 : 4

  ws:                     # ‚âù bom | unicode-space | multi-line-comment
    - include             : bom
    - include             : u_sp
    - include             : comment_block‚à®doc
  wss:
    - include             : boms
    - include             : u_sps
    - include             : comment_block‚à®doc
  bom:
    - match               : '{{bom}}'
      #scope               : dbg‚úóbom
      pop                 : 1
  boms:
    - match               : '{{bom}}'
      #scope               : dbg‚úóboms
  u_sp:
    - match               : '{{u_sp}}'
      #scope               : dbg‚úó‚ê†
      pop                 : 1
  u_sps:
    - match               : '{{u_sp}}'
      #scope               : dbg‚úó‚ê†s
  b_sp:
    - match               : '{{b_sp}}'
      #scope               : dbg‚úób‚ê†
      pop                 : 1
  b_sps:
    - match               : '{{b_sp}}'
      #scope               : dbg‚úób‚ê†s

  node‚ê†:                 # ‚âù node-space: ws* escline ws* | ws+
    - include             : line_continuation
    - include             : ws+‚à®ws-line‚éã-ws
  node‚ê†s:
    - include             : line_continuations
    - include             : wss # todo: don't need branching?
  node‚ê†‚ÅÑ-:                #
    - include             : line_continuation‚ÅÑ-
    - include             : ws+‚à®ws-line‚éã-ws
  ws+‚à®ws-line‚éã-ws:
    - match               : '(?={{ws_beg}})'
      branch_point        : ‚∏ôws+‚à®ws-line‚éã-ws
      branch              :
        - ws+‚∏ô1
        - ws-line‚éã-ws‚∏ô1
  ws+‚à®ws-line‚éã-ws‚ÅÑ-:
    - match               : '(?={{ws_beg}})'
      branch_point        : ‚∏ôws+‚à®ws-line‚éã-ws‚ÅÑ-
      branch              :
        - ws+‚ÅÑ-‚∏ô1
        - ws-line‚éã-ws‚ÅÑ-‚∏ô1
  ws+‚∏ô1:
    #- meta_scope          : dbg‚úónode‚ê†_ws+‚à®ws-line‚éã-ws_ws+‚∏ô1
    - match               : '(?={{escline_beg}})'
      fail                : ‚∏ôws+‚à®ws-line‚éã-ws
    - include             : wss
    - include             : pop‚∏ô
    # - meta_scope          : ‚úóws+‚∏ô1
    # - match               : '{{b_sp}}'
      # scope               : bsp‚úóws+‚∏ô1
    # - include             : comment_block‚à®doc
    # - include             : node-elements
    # - match               : '(?={{ws_beg}})'
      # push                :
      # - include           : ws-pop2
    # - include             : anyüõë
  ws+‚ÅÑ-‚∏ô1:
    - match               : '(?={{escline_beg}})'
      fail                : ‚∏ôws+‚à®ws-line‚éã-ws‚ÅÑ-
    - include             : wss
    - include             : pop‚∏ô
  ws-line‚éã-ws‚∏ô1:
    - include             : wss
    - include             : line_continuation
    - include             : pop‚∏ô
    # - meta_scope          : ‚úóws-line‚éã-ws‚∏ô1
    # - match               : '{{b_sp}}'
    #   scope               : bsp‚úóws-line‚éã-ws‚∏ô1
    # - include             : comment_block‚à®doc
  ws-line‚éã-ws‚ÅÑ-‚∏ô1:
    - include             : wss
    - include             : line_continuation‚ÅÑ-
    - include             : pop‚∏ô
  node‚ê†+:
    - include             : node‚ê†
    - include             : anyüõë



# Various helpers
  ‚ê§üõës:
    - match               : '{{nl_s}}'
      scope               : invalid.illegal.position.kdl #‚úódelnl
  ‚ê§üõë:
    - match               : '{{nl_s}}'
      scope               : invalid.illegal.position.kdl #‚úódelnl1
      pop                 : 1
  ‚ê§üõë2:
    - match               : '{{nl_s}}'
      scope               : invalid.illegal.position.kdl #‚úódelnl2
      pop                 : 2
  ‚ê§üõë3:
    - match               : '{{nl_s}}'
      scope               : invalid.illegal.position.kdl #‚úódelnl3
      pop                 : 3
  ‚ê§üõë¬πs:                 # make only the first contiguous ‚ê§ red
    - match               : '({{nl_s}})'
      scope               : invalid.illegal.position.kdl #‚úó1
      push                :
      - match             : '({{nl_s}})'
        scope             : invalid.illegal.muted.position.kdl #‚úó1b
      - include           : else-pop
  anyüõës:
    - match               : '[\S\s]'
      scope               : invalid.illegal.position.kdl #‚úóDelAnyüõës
  anyüõë:
    - match               : '[\S\s]'
      scope               : invalid.illegal.position.kdl #‚úóDelAnyüõë
      pop                 : 1
  süõë¬π:                   # make only the first contiguous \s red
    - match               : '(\s)'
      scope               : invalid.illegal.position.kdl #‚úósüõë¬πs
      push                :
      - match             : '(\s)'
        scope             : invalid.illegal.muted.position.kdl #‚úósüõë¬πs
        pop               : 2    # bail out after 2nd space
      - include           : pop2 # bail out after 1st space
  süõë¬πs:                  # make only the first contiguous \s red
    - match               : '(\s)'
      scope               : invalid.illegal.position.kdl #‚úósüõë¬πs
      push                :
      - match             : '(\s)'
        scope             : invalid.illegal.muted.position.kdl #‚úósüõë¬πs
      - include           : pop # repeat 2nd space
  bspüõë¬πs:                  # make only the first contiguous b_sp red
    - match               : '({{b_sp}})'
      scope               : invalid.illegal.position.kdl #‚úóbspüõë¬πs
      push                :
      - match             : '({{b_sp}})'
        scope             : invalid.illegal.muted.position.kdl #‚úóbspüõë¬πs
      - include           : pop # repeat 2nd space
  süõës:
    - match               : '(\s)'
      scope               : invalid.illegal.position.kdl #‚úó2
  süõë:
    - match               : '(\s)'
      scope               : invalid.illegal.position.kdl #‚úó3
    - include             : else-pop
  Süõës:
    - match               : '(\S)'
      scope               : invalid.illegal.position.kdl #‚úóSüõë
  Süõë:
    - match               : '(\S)'
      scope               : invalid.illegal.position.kdl #‚úóSüõë
      pop                 : 1
  Süõëpre‚ê†:               # mark without red highlight
    - match               : '(\S*)(?={{b_sp}})'
      captures            :
        2:                  invalid.illegal.muted.position.kdl #‚úóSüõëpre‚ê†
  chüõëpre‚ê†:              # to avoid red flashes, mark last char as illegal before ‚ê†
    - match               : '({{charID}}*)({{charID}})(?={{b_sp}})'
      captures            :
        1:                  invalid.illegal.muted.position.kdl #‚úóchüõëpre‚ê†
        2:                  invalid.illegal.position.kdl #‚úóchüõëpre‚ê†
  chüõëpre-str:
    - match               : '({{charID}}*?)({{charID}})(?={{string_beg}})'
      captures            :
        1:                  invalid.illegal.muted.position.kdl #‚úóchüõëpre-str
        2:                  invalid.illegal.position.kdl #‚úóchüõëpre-str
  chüõëpre_term:           # to avoid red flashes, mark last char as illegal before node terminator
    - match               : '({{charID}}*)({{charID}})(?={{node_term_beg_no_nl}})'
      captures            :
        1:                  invalid.illegal.muted.position.kdl #‚úóchüõëpre_term
        2:                  invalid.illegal.position.kdl #‚úóchüõëpre_term
  Süõëpre‚ê§:               # to avoid red flashes, mark as invalid, not illegal
    - match               : '(\S*)(\S)(?=\n)'
      captures            :
        1:                  invalid.illegal.muted.position.kdl
        2:                  invalid.illegal.muted.position.kdl
  Süõë¬πpre‚ê§:              # make only the first char before ‚ê§ red
    - match               : '(\S)'
      scope               : invalid.illegal.position.kdl #‚úóSüõë¬πpre‚ê§
      push                :
      - include           : pop_pre‚ê§
      - match             : '(\S)'
        scope             : invalid.illegal.muted.position.kdl #‚úóSüõë¬πpre‚ê§
  Süõë¬πpre_ws:             # ... ‚ê† ‚ê§
    - match               : '(\S)'
      scope               : invalid.illegal.position.kdl #‚úóSüõë¬πpre‚ê§
      push                :
      - include           : pop_pre‚ê†
      - include           : pop_pre‚ê§
      - match             : '(\S)'
        scope             : invalid.illegal.muted.position.kdl #‚úóSüõë¬πpre‚ê§
  Süõë¬πpre_s‚à®c‚à®t:          # ... child start or node terminator or ws
    - match               : '(\S)'
      scope               : invalid.illegal.position.kdl #‚úóSüõë¬πpre_s‚à®c‚à®t
      push                :
      - include           : pop_pre-ch
      - include           : pop_pre-term
      - include           : pop_pre-node‚ê†
      - match             : '(\S)'
        scope             : invalid.illegal.muted.position.kdl #‚úóSüõë¬πpre_s‚à®c‚à®t


  charüÜî¬¨:
    - match               : '{{charID_not}}'
      scope               : invalid.illegal.kdl #‚úóchID
  pop_pre‚ê†:
    - match               : '(?={{b_sp}})'
      pop                 : 1
  pop_pre-ch:
    - match               : '(?=\{)'
      pop                 : 1
  pop_pre-term:
    - match               : '(?={{node_term_beg}})'
      pop                 : 1
  pop_pre‚ê§:
    - match               : '(?={{nl_s}})'
      pop                 : 1
  pop_pre-node‚ê†:
    - match               : '(?={{node_sp_beg}})'
      pop                 : 1
  pop_preüÜî¬¨:
    - match               : '(?={{charID_not}})'
      pop                 : 1
  pop_pre-ws:
    - match               : '(?={{ws_beg}})'
      pop                 : 1
  pop_pre-str:
    - match               : '(?=\"|r\")'
      pop                 :
  pop2_pre‚ê†:
    - match               : '(?={{b_sp}})'
      pop                 : 2
  pop2_pre-ch:
    - match               : '(?=\{)'
      pop                 : 2
  pop2_pre-term:
    - match               : '(?={{node_term_beg}})'
      pop                 : 2
  pop3_pre-term:
    - match               : '(?={{node_term_beg}})'
      pop                 : 3
  pop2_pre‚ê§:
    - match               : '(?={{nl_s}})'
      pop                 : 2
  pop2_pre-node‚ê†:
    - match               : '(?={{node_sp_beg}})'
      pop                 : 2
  pop2_pre-str:
    - match               : '(?=\"|r\")'
      pop                 : 2
  pop2_preüÜî¬¨:
    - match               : '(?={{charID_not}})'
      pop                 : 2
  pop2_pre-ws:
    - match               : '(?={{ws_beg}})'
      pop                 : 2
  pop3_pre-str:
    - match               : '(?=\"|r\")'
      pop                 : 3
  pop_preÔºâ:
    - match               : (?=\))
      pop                 : 1
  pop2_preÔºâ:
    - match               : (?=\))
      pop                 : 2

  else-pop:               # pop_pre-non_ws
    - match               : '(?=\S)'
      pop                 : 1
  else-pop2:
    - match               : '(?=\S)'
      pop                 : 2
  else-pop3:
    - match               : '(?=\S)'
      pop                 : 3
  pop:
    - match               : ''
      pop                 : 1
  pop2:
    - match               : ''
      pop                 : 2
  pop3:
    - match               : ''
      pop                 : 3
  pop4:
    - match               : ''
      pop                 : 4
  pop5:
    - match               : ''
      pop                 : 5
  pop‚∏ô:
    - include             : pop
  pop2‚∏ô:
    - include             : pop2
  pop3‚∏ô:
    - include             : pop3


# Whitespace (Line breaking)
  #  Acronym	Name                         	Code Pt 	Oniguruma
  #  CRLF   	Carriage Return and Line Feed	   D + A	\r\n
  #  CR     	Carriage Return              	   D    	\r
  #  LF     	Line Feed                    	   A    	\n (newline)
  #‚úó VT     	Vertical Tabulation          	   B    	\v
  #  FF     	Form Feed                    	   C    	\f
  #  NEL    	Next Line                    	  85    	‚ÄØ
  #  LS     	Line Separator               	2028    	‚ÄØ
  #  PS     	Paragraph Separator          	2029    	‚ÄØ
  # ‚àë= d+a d a c   85 2028 2029 (KDL)
  # ‚àë= d+a d a c b 85 2028 2029 (oniguruma) \R: \r\n or \r \n \v \f 85 2028 2029 (!!! can't be used in a character class !!!)
  #             \v vertical tab is excluded from KDL
  # Sublime only works with: (?>\R), equiv= (?>\r\n?|[\x{A}-\x{C}\x{85}\x{2028}\x{2029}])
  # (?>‚Ä¶) ‚Äî Matches the provided pattern, but no backtracking is performed if the match fails
  # \b           backspace               8
  # \a           bell                    7
  # \e           escape                 1B

# Whitespace (non-Newline)
  # Acronym	Name                     	Code Pt	Oniguruma
  #        	Character Tabulation     	   9   	\t (horizontal tab)
  #        	Space                    	  20   	.
  #        	No-Break Space           	  A0   	.
  #        	Ogham Space Mark         	1680   	.
  #        	En Quad                  	2000   	.
  #        	Em Quad                  	2001   	.
  #        	En Space                 	2002   	.
  #        	Em Space                 	2003   	.
  #        	Three-Per-Em Space       	2004   	.
  #        	Four-Per-Em Space        	2005   	.
  #        	Six-Per-Em Space         	2006   	.
  #        	Figure Space             	2007   	.
  #        	Punctuation Space        	2008   	.
  #        	Thin Space               	2009   	.
  #        	Hair Space               	200A   	.
  #        	Narrow No-Break Space    	202F   	.
  #        	Medium Mathematical Space	205F   	.
  #        	Ideographic Space        	3000   	.
  # ‚àë=                 9 20 A0 1680 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 200A 202F 205F 3000
  # \s 85(nel) a b c d 9 Line_Separator Paragraph_Separator Space_Separator (oniguruma)
    # Space_Separator    20 A0 1680 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 200A 202F 205F 3000
    # Line_Separator      2028
    # Paragraph_Separator	2029
    # https://www.compart.com/en/unicode/category/Zl
    # https://www.compart.com/en/unicode/category/Zs
    # https://www.compart.com/en/unicode/category/Zp
    # [^\S\r\n] double negative to match whitespace without newline (but add other newlines)
      # [^\S(?>\R)] seems to work
      # \S character NOT
        # 9 a b c d 85
        # Line_Separator      2028
        # Paragraph_Separator 2029
        # Space_Separator 20 A0 1680 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 200A 202F 205F 3000
