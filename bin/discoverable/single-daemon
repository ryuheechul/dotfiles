#!/usr/bin/env bash

# A helper script to keep the same daemon with only one instance for same binary

# current limitation of this script: it doesn' process args for the command - this may be mitigated in the future

# cmd to expand ~ to $HOME
the_cmd="${1/#\~/$HOME}"
# only leave basename for pid in case the cmd comes with path
the_path="/var/tmp/single-daemon/$(basename "${the_cmd}").pid"

# early exits to prevent unwanted behaviors
test -z "${the_cmd}" && echo "no command is provided" && exit 1
! command -v "${the_cmd}" >/dev/null && echo "${the_cmd} is not found" && exit 1

! test -x "$(command -v "${the_cmd}")" && echo "${the_cmd} is not executable" && exit 1

# make sure to have the directory for pid file
mkdir -p /var/tmp/single-daemon

# kill the old process's process group before starting the new one
# why group instead of process? when it was just a process, it failed to kill any child (or processes in the group)
# which is the undesired behavior of this script
# more info on that can be found at http://morningcoffee.io/killing-a-process-and-all-of-its-descendants.html
if test -f "${the_path}"; then
  the_pid="$(cat "${the_path}")"
  # https://unix.stackexchange.com/a/232888/396504
  the_pgid="$(ps "${the_pid}" -o pgid= | tr -d ' ')"

  # kill if the pid belongs to the binary
  ps -p "${the_pid}" | grep "${the_cmd}" >/dev/null \
    && echo "pid ${the_pid} was found for existing one so closing it first." \
    && kill -- "-${the_pgid}"
fi

# completely detach from terminal - https://stackoverflow.com/a/10408906/1570165
nohup ${the_cmd} </dev/null >/dev/null 2>&1 &

# save pid for later and print it to stdout
echo -n $! | tee "${the_path}"
