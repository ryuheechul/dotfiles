#!/usr/bin/env bash

# why this wrapper?
# - avoid using channel and use the explicit source set by `niv`

function is-nixos {
  grep "NAME=NixOS" /etc/os-release &>/dev/null
}

# this is what I'm contemplating to use to be closer with vanilla setting
# but this also evidently creates another diversion since I already use nixpkgs (that is not necessarily the same rev as the nixos for homemanager )
# maybe i will consider unifying to one channel (in case of nixos) in the future but until then nix-shell will just favor nixpkgs
function _choose_nixpkgs {
  is-nixos && echo nixpkgs=nixos:nixos-hardware || echo nixpkgs:nixos-hardware
}

# but I will just stick with the old implementation for now
function choose_nixpkgs {
  echo nixpkgs:nixos-hardware
}

curr_d="$(dirname "$0")"
nix_d="${curr_d}/../../../nix"
path_for="${nix_d}/niv-shim/bin/nix-path-via-niv.sh"
nix_path="$("${path_for}" "$(choose_nixpkgs)")"
alt_hm="$("${path_for}" home-manager)"

path_to_search_excluding_the_self_override="$(printenv PATH | tr ':' '\n' | grep -E -v "${HOME}.*/bin/path/default" | tr '\n' ':' | sed 's/:$/\n/')"
bin_nix_shell="$(PATH="${path_to_search_excluding_the_self_override}" which nix-shell)"

if ! test -x "${bin_nix_shell}"; then
  echo "[ERROR] '${bin_nix_shell}' is not executable"
fi

if test "$0" = "${bin_nix_shell}"; then
  echo "[ERROR] failed to find the real \`nix-shell\` and aborting"
fi

# `-I "nixpkgs=${alt_nixpkgs}[:...]" seems to have a trouble when installing home-manager on NixOS
# thus altering $NIX_PATH instead
NIX_PATH="${nix_path}" \
  "${bin_nix_shell}" \
  -I "${alt_hm}" \
  "$@"
