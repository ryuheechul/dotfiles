#!/usr/bin/env zsh
# (use zsh shebang to avoid shellcheck to be in effect)

# This is not really to run these commands all at once;
# but to document any useful diagnostic information regarding Linux
# the commands may added with or without comments after the line `exit 0`
command -v gum >/dev/null || { echo 'you need gum to proceed' exit 1; }

gum spin --spinner dot --title "going to show documented commands to run" -- sleep 1

# find the line for `exit 0`
nr="$(grep '^exit 0' "$0" -n | cut -d':' -f1 | head -n1)"

sanitized="$(cat "$0" | awk "NR > ${nr}" | awk '!/^#/' | grep -v '^$')"

echo 'Choose a command to run'
# anything before "${nr}" would be ignored
cmd="$(echo "${sanitized}" | gum filter)"

# exit on sigint - https://github.com/charmbracelet/gum/issues/469#issuecomment-1865391607
test $? -eq 130 && exit 130

# confirm to run or not
echo "'${cmd}' is selected to run"
gum confirm "run \`${cmd}\`?" &&
  bash -c "${cmd}"

# this is how it prevents to run the rest of commands
exit 0

## now this is where I can list actual runnable commands that is useful to run more about the system; it's sort of like personal mini tldr.sh

uname -a                              # print system information
echo "${XDG_DATA_DIRS}" | tr ':' '\n' # print XDG_DATA_DIRS
bootctl status                        # shows brief information about the system firmware
man bootup                            # explain booting process in detail
wdctl                                 # see watchdog status
lshw                                  # list hardware
lshw -c network
# https://askubuntu.com/a/654928/1666783
lshw -c network -businfo
lsusb
# https://utcc.utoronto.ca/~cks/space/blog/linux/SeeingUSBDeviceSpeeds
lsusb -tv | less  # verbose tree - useful to finding speed limit
lsusb -tvv | less # above + show device as well
lspci
tldr ethtool
lspci -tv | less
lsscsi
lsblk -f
mount # list mounted
sudo blkid
sudo fdisk -l
netstat -nlp # see open ports
netstat -i   # kernel interface table
# for NetworkManager (basically when there is no /etc/network/interfaces)
# https://askubuntu.com/a/1321815/1666783
# https://nixos.org/manual/nixos/stable/#sec-networkmanager
nmcli # there is also nmtui
nmcli device
nmcli device wifi
ip a # ip addr
ip r # ip route
ip l # ip link
# https://developers.redhat.com/articles/2022/04/06/introduction-linux-bridging-commands-and-features#vlan_tunnel_mapping
bridge link show
brctl show
iptables -V
# for details on network devices
ls /sys/class/net
lscpu
vmstat # virtual memory statistics
vmstat -s
drmdevice
drm_info | less # print information about monitor/screen
# map between hardware and interfaces https://unix.stackexchange.com/a/658392/396504
ls -lah /sys/class/net/
lsmod # show the status of modules in the linux kernel

fi_info # libfabric
glxinfo -B
vainfo
who      # show who is logged on
tty      # print the file name of the terminal connected to standard input
stty -a  # print terminal line settings
loginctl # list login sessions
loginctl show-user
tldr loginctl
portablectl # https://systemd.io/PORTABLE_SERVICES/
resolvectl
sudo powertop # see power consumption

xlsclients # list x client applications running on a display

ss      # investigate sockets - see `tldr ss` for more
ss -xlp # list unix sockets
sudo libinput list-devices
xinput --list
swapon -s # summary of swaps
cat /proc/filesystems
cat /proc/meminfo
ls /sys/fs/cgroup/ # introspect cgroups
arp                # show system's ARP cache
hostname           # print hostname
hostnamectl        # show system hostname and related information sort of like neofetch

systemctl
systemctl status
systemctl status --failed         # will shot nothing if none failed
systemctl --user show-environment # print environment for the user before I pollute
systemctl list-unit-files         # discover unitfiles
systemctl list-dependencies
systemctl list-dependencies systemd-logind.service
systemctl list-dependencies --all systemd-logind.service
systemctl --user list-dependencies
systemctl cat systemd-logind.service
systemctl cat '*'
systemctl show -p Restart systemd-logind.service
systemctl show systemd-logind.service
systemd-delta         # find overriden configurations files
systemd-analyze       # debug systemd
systemd-analyze blame # debug systemd
systemd-analyze critical-chain
systemd-analyze critical-chain systemd-logind.service
systemd-analyze --user critical-chain
systemd-analyze security
systemd-analyze security systemd-logind
systemd-analyze --user security
systemd-detect-virt # identifies surrounding virtualization environment
systemd-detect-virt --vm
systemd-detect-virt --container
systemd-cgls  # list cgroups
systemd-cgtop # top cgroups

journalctl # https://0pointer.net/blog/projects/journalctl.html
journalctl -u systemd-logind.service

docker info --format '{{.SecurityOptions}}'
docker run --rm -it alpine sh -c 'grep Seccomp /proc/self/status' # verify seccomp (directly with docker and indirectly with host)

sudo aa-status # check AppArmor status

busctl # introspect D-Bus bus
gdbus monitor --system --dest org.freedesktop.DBus
gnome-extensions list
gnome-extensions list --enabled
xdg-settings get default-web-browser
fwupdmgr get-devices | less # print device firmware info
fwupdmgr security | less
which tpm2_getcap && sudo tpm2_getcap algorithms # list tpm algorithms
modinfo iwlwifi | less
